
/*
 * This file was generated by the SOM Compiler.
 * FileName: devcpu.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_WPDevCPUEx_xh
#define SOM_WPDevCPUEx_xh

class WPDevCPUEx;

#define WPDevCPUEx_MajorVersion 1
#define WPDevCPUEx_MinorVersion 2

/*
 * Passthru lines: File: "C.xh", "before"
 */

#define INCL_PM
#define INCL_BASE
#include <os2.h>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevCPU_xh
#include <wpcpu.xh>
#endif

#ifndef WPDevCPUEx_API
#define WPDevCPUEx_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevCPU;
class M_WPDevCPUEx;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevCPUEx Class */
class M_WPDevCPUEx;
SOMEXTERN M_WPDevCPUEx * SOMLINK WPDevCPUExNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevCPUEx class object, and the methods it introduces. */
SOMEXTERN struct WPDevCPUExClassDataStructure {
	M_WPDevCPUEx *classObject;
} SOMDLINK WPDevCPUExClassData;
#define _WPDevCPUEx WPDevCPUExClassData.classObject

/* The API to parentMtabs for WPDevCPUEx, and the instance data it introduces. */
SOMEXTERN struct WPDevCPUExCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevCPUExCClassData;

/*
 * -- Typedefs for WPDevCPUEx Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceDevice1Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceDevice1Page *somTD_WPDevCPUEx_wpAddDeviceDevice1Page;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceDevice2Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceDevice2Page *somTD_WPDevCPUEx_wpAddDeviceDevice2Page;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceDMA1Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceDMA1Page *somTD_WPDevCPUEx_wpAddDeviceDMA1Page;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceIRQ1Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceIRQ1Page *somTD_WPDevCPUEx_wpAddDeviceIRQ1Page;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceMemory1Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceMemory1Page *somTD_WPDevCPUEx_wpAddDeviceMemory1Page;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddDeviceIO1Page(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddDeviceIO1Page *somTD_WPDevCPUEx_wpAddDeviceIO1Page;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpAddSettingsPages(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddSettingsPages *somTD_WPDevCPUEx_wpAddSettingsPages;
typedef void   SOMLINK somTP_WPDevCPUEx_wpInitData(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpInitData *somTD_WPDevCPUEx_wpInitData;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpModifyPopupMenu(WPDevCPUEx *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition);
typedef somTP_WPDevCPUEx_wpModifyPopupMenu *somTD_WPDevCPUEx_wpModifyPopupMenu;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryDetailsData(WPDevCPUEx *somSelf, 
		PVOID* ppDetailsData, 
		PULONG pcp);
typedef somTP_WPDevCPUEx_wpQueryDetailsData *somTD_WPDevCPUEx_wpQueryDetailsData;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRestoreState(WPDevCPUEx *somSelf, 
		ULONG ulReserved);
typedef somTP_WPDevCPUEx_wpRestoreState *somTD_WPDevCPUEx_wpRestoreState;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveState(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpSaveState *somTD_WPDevCPUEx_wpSaveState;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetup(WPDevCPUEx *somSelf, 
		PSZ pszSetupString);
typedef somTP_WPDevCPUEx_wpSetup *somTD_WPDevCPUEx_wpSetup;
typedef void   SOMLINK somTP_WPDevCPUEx_wpUnInitData(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpUnInitData *somTD_WPDevCPUEx_wpUnInitData;
typedef PMINIRECORDCORE   SOMLINK somTP_WPDevCPUEx_wpCnrInsertObject(WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert);
typedef somTP_WPDevCPUEx_wpCnrInsertObject *somTD_WPDevCPUEx_wpCnrInsertObject;
typedef HOBJECT   SOMLINK somTP_WPDevCPUEx_wpQueryHandle(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryHandle *somTD_WPDevCPUEx_wpQueryHandle;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpCopyObject(WPDevCPUEx *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_WPDevCPUEx_wpCopyObject *somTD_WPDevCPUEx_wpCopyObject;
typedef void   SOMLINK somTP_WPDevCPUEx_somDefaultInit(WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_WPDevCPUEx_somDefaultInit *somTD_WPDevCPUEx_somDefaultInit;
typedef void   SOMLINK somTP_WPDevCPUEx_somDestruct(WPDevCPUEx *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_WPDevCPUEx_somDestruct *somTD_WPDevCPUEx_somDestruct;
typedef HPOINTER   SOMLINK somTP_WPDevCPUEx_wpQueryIcon(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryIcon *somTD_WPDevCPUEx_wpQueryIcon;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveImmediate(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpSaveImmediate *somTD_WPDevCPUEx_wpSaveImmediate;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpIdentify(WPDevCPUEx *somSelf, 
		PSZ pszIdentity);
typedef somTP_WPDevCPUEx_wpIdentify *somTD_WPDevCPUEx_wpIdentify;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddObjectGeneralPage(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddObjectGeneralPage *somTD_WPDevCPUEx_wpAddObjectGeneralPage;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddObjectGeneralPage2(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddObjectGeneralPage2 *somTD_WPDevCPUEx_wpAddObjectGeneralPage2;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpAddObjectWindowPage(WPDevCPUEx *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevCPUEx_wpAddObjectWindowPage *somTD_WPDevCPUEx_wpAddObjectWindowPage;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpAddToObjUseList(WPDevCPUEx *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_WPDevCPUEx_wpAddToObjUseList *somTD_WPDevCPUEx_wpAddToObjUseList;
typedef PBYTE   SOMLINK somTP_WPDevCPUEx_wpAllocMem(WPDevCPUEx *somSelf, 
		ULONG cbBytes, 
		PULONG prc);
typedef somTP_WPDevCPUEx_wpAllocMem *somTD_WPDevCPUEx_wpAllocMem;
typedef BOOL32   SOMLINK somTP_WPDevCPUEx_wpAppendObject(WPDevCPUEx *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_WPDevCPUEx_wpAppendObject *somTD_WPDevCPUEx_wpAppendObject;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpAssertObjectMutexSem(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpAssertObjectMutexSem *somTD_WPDevCPUEx_wpAssertObjectMutexSem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpClose(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpClose *somTD_WPDevCPUEx_wpClose;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpCnrRemoveObject(WPDevCPUEx *somSelf, 
		HWND hwndCnr);
typedef somTP_WPDevCPUEx_wpCnrRemoveObject *somTD_WPDevCPUEx_wpCnrRemoveObject;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpCnrSetEmphasis(WPDevCPUEx *somSelf, 
		ULONG ulEmphasisAttr, 
		BOOL fTurnOn);
typedef somTP_WPDevCPUEx_wpCnrSetEmphasis *somTD_WPDevCPUEx_wpCnrSetEmphasis;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpConfirmDelete(WPDevCPUEx *somSelf, 
		ULONG fConfirmations);
typedef somTP_WPDevCPUEx_wpConfirmDelete *somTD_WPDevCPUEx_wpConfirmDelete;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpConfirmObjectTitle(WPDevCPUEx *somSelf, 
		WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID);
typedef somTP_WPDevCPUEx_wpConfirmObjectTitle *somTD_WPDevCPUEx_wpConfirmObjectTitle;
typedef void   SOMLINK somTP_WPDevCPUEx_wpCopiedFromTemplate(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpCopiedFromTemplate *somTD_WPDevCPUEx_wpCopiedFromTemplate;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpCreateAnother(WPDevCPUEx *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder);
typedef somTP_WPDevCPUEx_wpCreateAnother *somTD_WPDevCPUEx_wpCreateAnother;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpCreateFromTemplate(WPDevCPUEx *somSelf, 
		WPFolder* folder, 
		BOOL fLock);
typedef somTP_WPDevCPUEx_wpCreateFromTemplate *somTD_WPDevCPUEx_wpCreateFromTemplate;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpCreateShadowObject(WPDevCPUEx *somSelf, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_WPDevCPUEx_wpCreateShadowObject *somTD_WPDevCPUEx_wpCreateShadowObject;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpDelete(WPDevCPUEx *somSelf, 
		ULONG fConfirmations);
typedef somTP_WPDevCPUEx_wpDelete *somTD_WPDevCPUEx_wpDelete;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpDeleteFromObjUseList(WPDevCPUEx *somSelf, 
		PUSEITEM pUseItem);
typedef somTP_WPDevCPUEx_wpDeleteFromObjUseList *somTD_WPDevCPUEx_wpDeleteFromObjUseList;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpDisplayHelp(WPDevCPUEx *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPDevCPUEx_wpDisplayHelp *somTD_WPDevCPUEx_wpDisplayHelp;
typedef HWND   SOMLINK somTP_WPDevCPUEx_wpDisplayMenu(WPDevCPUEx *somSelf, 
		HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved);
typedef somTP_WPDevCPUEx_wpDisplayMenu *somTD_WPDevCPUEx_wpDisplayMenu;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpDoesObjectMatch(WPDevCPUEx *somSelf, 
		PVOID pvoidExtendedCriteria);
typedef somTP_WPDevCPUEx_wpDoesObjectMatch *somTD_WPDevCPUEx_wpDoesObjectMatch;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpDraggedOverObject(WPDevCPUEx *somSelf, 
		WPObject* DraggedOverObject);
typedef somTP_WPDevCPUEx_wpDraggedOverObject *somTD_WPDevCPUEx_wpDraggedOverObject;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpDragOver(WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo);
typedef somTP_WPDevCPUEx_wpDragOver *somTD_WPDevCPUEx_wpDragOver;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpDrop(WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem);
typedef somTP_WPDevCPUEx_wpDrop *somTD_WPDevCPUEx_wpDrop;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpDroppedOnObject(WPDevCPUEx *somSelf, 
		WPObject* DroppedOnObject);
typedef somTP_WPDevCPUEx_wpDroppedOnObject *somTD_WPDevCPUEx_wpDroppedOnObject;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpEndConversation(WPDevCPUEx *somSelf, 
		ULONG ulItemID, 
		ULONG flResult);
typedef somTP_WPDevCPUEx_wpEndConversation *somTD_WPDevCPUEx_wpEndConversation;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpFilterPopupMenu(WPDevCPUEx *somSelf, 
		ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect);
typedef somTP_WPDevCPUEx_wpFilterPopupMenu *somTD_WPDevCPUEx_wpFilterPopupMenu;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpFilterMenu(WPDevCPUEx *somSelf, 
		FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_WPDevCPUEx_wpFilterMenu *somTD_WPDevCPUEx_wpFilterMenu;
typedef PUSEITEM   SOMLINK somTP_WPDevCPUEx_wpFindUseItem(WPDevCPUEx *somSelf, 
		ULONG type, 
		PUSEITEM pCurrentItem);
typedef somTP_WPDevCPUEx_wpFindUseItem *somTD_WPDevCPUEx_wpFindUseItem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpFormatDragItem(WPDevCPUEx *somSelf, 
		PDRAGITEM pdrgItem);
typedef somTP_WPDevCPUEx_wpFormatDragItem *somTD_WPDevCPUEx_wpFormatDragItem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpFree(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpFree *somTD_WPDevCPUEx_wpFree;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpFreeMem(WPDevCPUEx *somSelf, 
		PBYTE pByte);
typedef somTP_WPDevCPUEx_wpFreeMem *somTD_WPDevCPUEx_wpFreeMem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpHide(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpHide *somTD_WPDevCPUEx_wpHide;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpInsertPopupMenuItems(WPDevCPUEx *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_WPDevCPUEx_wpInsertPopupMenuItems *somTD_WPDevCPUEx_wpInsertPopupMenuItems;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpInsertMenuItems(WPDevCPUEx *somSelf, 
		HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID);
typedef somTP_WPDevCPUEx_wpInsertMenuItems *somTD_WPDevCPUEx_wpInsertMenuItems;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpInsertSettingsPage(WPDevCPUEx *somSelf, 
		HWND hwndNotebook, 
		PPAGEINFO ppageinfo);
typedef somTP_WPDevCPUEx_wpInsertSettingsPage *somTD_WPDevCPUEx_wpInsertSettingsPage;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpMenuItemHelpSelected(WPDevCPUEx *somSelf, 
		ULONG MenuId);
typedef somTP_WPDevCPUEx_wpMenuItemHelpSelected *somTD_WPDevCPUEx_wpMenuItemHelpSelected;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpMenuItemSelected(WPDevCPUEx *somSelf, 
		HWND hwndFrame, 
		ULONG ulMenuId);
typedef somTP_WPDevCPUEx_wpMenuItemSelected *somTD_WPDevCPUEx_wpMenuItemSelected;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpModifyMenu(WPDevCPUEx *somSelf, 
		HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved);
typedef somTP_WPDevCPUEx_wpModifyMenu *somTD_WPDevCPUEx_wpModifyMenu;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpMoveObject(WPDevCPUEx *somSelf, 
		WPFolder* Folder);
typedef somTP_WPDevCPUEx_wpMoveObject *somTD_WPDevCPUEx_wpMoveObject;
typedef HWND   SOMLINK somTP_WPDevCPUEx_wpOpen(WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_WPDevCPUEx_wpOpen *somTD_WPDevCPUEx_wpOpen;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpPrintObject(WPDevCPUEx *somSelf, 
		PPRINTDEST pPrintDest, 
		ULONG ulReserved);
typedef somTP_WPDevCPUEx_wpPrintObject *somTD_WPDevCPUEx_wpPrintObject;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryConcurrentView(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryConcurrentView *somTD_WPDevCPUEx_wpQueryConcurrentView;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryButtonAppearance(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryButtonAppearance *somTD_WPDevCPUEx_wpQueryButtonAppearance;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryConfirmations(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryConfirmations *somTD_WPDevCPUEx_wpQueryConfirmations;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpQueryDefaultHelp(WPDevCPUEx *somSelf, 
		PULONG pHelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPDevCPUEx_wpQueryDefaultHelp *somTD_WPDevCPUEx_wpQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryDefaultView(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryDefaultView *somTD_WPDevCPUEx_wpQueryDefaultView;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryError(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryError *somTD_WPDevCPUEx_wpQueryError;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetFolder(WPDevCPUEx *somSelf, 
		WPObject* container);
typedef somTP_WPDevCPUEx_wpSetFolder *somTD_WPDevCPUEx_wpSetFolder;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpQueryFolder(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryFolder *somTD_WPDevCPUEx_wpQueryFolder;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryIconData(WPDevCPUEx *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_WPDevCPUEx_wpQueryIconData *somTD_WPDevCPUEx_wpQueryIconData;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryMinWindow(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryMinWindow *somTD_WPDevCPUEx_wpQueryMinWindow;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryNameClashOptions(WPDevCPUEx *somSelf, 
		ULONG menuID);
typedef somTP_WPDevCPUEx_wpQueryNameClashOptions *somTD_WPDevCPUEx_wpQueryNameClashOptions;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryStyle(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryStyle *somTD_WPDevCPUEx_wpQueryStyle;
typedef BOOL32   SOMLINK somTP_WPDevCPUEx_wpSetTaskRec(WPDevCPUEx *somSelf, 
		PTASKREC pNew, 
		PTASKREC pOld);
typedef somTP_WPDevCPUEx_wpSetTaskRec *somTD_WPDevCPUEx_wpSetTaskRec;
typedef PTASKREC   SOMLINK somTP_WPDevCPUEx_wpFindTaskRec(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpFindTaskRec *somTD_WPDevCPUEx_wpFindTaskRec;
typedef PSZ   SOMLINK somTP_WPDevCPUEx_wpQueryTitle(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryTitle *somTD_WPDevCPUEx_wpQueryTitle;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRegisterView(WPDevCPUEx *somSelf, 
		HWND hwndFrame, 
		PSZ pszViewTitle);
typedef somTP_WPDevCPUEx_wpRegisterView *somTD_WPDevCPUEx_wpRegisterView;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpReleaseObjectMutexSem(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpReleaseObjectMutexSem *somTD_WPDevCPUEx_wpReleaseObjectMutexSem;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpRender(WPDevCPUEx *somSelf, 
		PDRAGTRANSFER pdxfer);
typedef somTP_WPDevCPUEx_wpRender *somTD_WPDevCPUEx_wpRender;
typedef MRESULT   SOMLINK somTP_WPDevCPUEx_wpRenderComplete(WPDevCPUEx *somSelf, 
		PDRAGTRANSFER pdxfer, 
		ULONG ulResult);
typedef somTP_WPDevCPUEx_wpRenderComplete *somTD_WPDevCPUEx_wpRenderComplete;
typedef BOOL32   SOMLINK somTP_WPDevCPUEx_wpReplaceObject(WPDevCPUEx *somSelf, 
		WPObject* targetObject, 
		BOOL32 fMove);
typedef somTP_WPDevCPUEx_wpReplaceObject *somTD_WPDevCPUEx_wpReplaceObject;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpRequestObjectMutexSem(WPDevCPUEx *somSelf, 
		ULONG ulTimeout);
typedef somTP_WPDevCPUEx_wpRequestObjectMutexSem *somTD_WPDevCPUEx_wpRequestObjectMutexSem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRestore(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpRestore *somTD_WPDevCPUEx_wpRestore;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRestoreData(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue);
typedef somTP_WPDevCPUEx_wpRestoreData *somTD_WPDevCPUEx_wpRestoreData;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRestoreLong(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue);
typedef somTP_WPDevCPUEx_wpRestoreLong *somTD_WPDevCPUEx_wpRestoreLong;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpRestoreString(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_WPDevCPUEx_wpRestoreString *somTD_WPDevCPUEx_wpRestoreString;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveData(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue);
typedef somTP_WPDevCPUEx_wpSaveData *somTD_WPDevCPUEx_wpSaveData;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveDeferred(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpSaveDeferred *somTD_WPDevCPUEx_wpSaveDeferred;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveLong(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue);
typedef somTP_WPDevCPUEx_wpSaveLong *somTD_WPDevCPUEx_wpSaveLong;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSaveString(WPDevCPUEx *somSelf, 
		PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue);
typedef somTP_WPDevCPUEx_wpSaveString *somTD_WPDevCPUEx_wpSaveString;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpScanSetupString(WPDevCPUEx *somSelf, 
		PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue);
typedef somTP_WPDevCPUEx_wpScanSetupString *somTD_WPDevCPUEx_wpScanSetupString;
typedef void   SOMLINK somTP_WPDevCPUEx_wpSetConcurrentView(WPDevCPUEx *somSelf, 
		ULONG ulCCView);
typedef somTP_WPDevCPUEx_wpSetConcurrentView *somTD_WPDevCPUEx_wpSetConcurrentView;
typedef void   SOMLINK somTP_WPDevCPUEx_wpSetButtonAppearance(WPDevCPUEx *somSelf, 
		ULONG ulButtonType);
typedef somTP_WPDevCPUEx_wpSetButtonAppearance *somTD_WPDevCPUEx_wpSetButtonAppearance;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetDefaultHelp(WPDevCPUEx *somSelf, 
		ULONG HelpPanelId, 
		PSZ HelpLibrary);
typedef somTP_WPDevCPUEx_wpSetDefaultHelp *somTD_WPDevCPUEx_wpSetDefaultHelp;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetDefaultView(WPDevCPUEx *somSelf, 
		ULONG ulView);
typedef somTP_WPDevCPUEx_wpSetDefaultView *somTD_WPDevCPUEx_wpSetDefaultView;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetError(WPDevCPUEx *somSelf, 
		ULONG ulErrorId);
typedef somTP_WPDevCPUEx_wpSetError *somTD_WPDevCPUEx_wpSetError;
typedef SGID   SOMLINK somTP_WPDevCPUEx_wpQueryScreenGroupID(WPDevCPUEx *somSelf, 
		SGID sgidPrevSgId);
typedef somTP_WPDevCPUEx_wpQueryScreenGroupID *somTD_WPDevCPUEx_wpQueryScreenGroupID;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetupOnce(WPDevCPUEx *somSelf, 
		PSZ pszSetupString);
typedef somTP_WPDevCPUEx_wpSetupOnce *somTD_WPDevCPUEx_wpSetupOnce;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetIcon(WPDevCPUEx *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_WPDevCPUEx_wpSetIcon *somTD_WPDevCPUEx_wpSetIcon;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetIconData(WPDevCPUEx *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_WPDevCPUEx_wpSetIconData *somTD_WPDevCPUEx_wpSetIconData;
typedef void   SOMLINK somTP_WPDevCPUEx_wpSetMinWindow(WPDevCPUEx *somSelf, 
		ULONG ulMinWindow);
typedef somTP_WPDevCPUEx_wpSetMinWindow *somTD_WPDevCPUEx_wpSetMinWindow;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpModifyStyle(WPDevCPUEx *somSelf, 
		ULONG ulStyleFlags, 
		ULONG ulStyleMask);
typedef somTP_WPDevCPUEx_wpModifyStyle *somTD_WPDevCPUEx_wpModifyStyle;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetTitle(WPDevCPUEx *somSelf, 
		PSZ pszNewTitle);
typedef somTP_WPDevCPUEx_wpSetTitle *somTD_WPDevCPUEx_wpSetTitle;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSwitchTo(WPDevCPUEx *somSelf, 
		ULONG View);
typedef somTP_WPDevCPUEx_wpSwitchTo *somTD_WPDevCPUEx_wpSwitchTo;
typedef HWND   SOMLINK somTP_WPDevCPUEx_wpViewObject(WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		ULONG ulView, 
		ULONG param);
typedef somTP_WPDevCPUEx_wpViewObject *somTD_WPDevCPUEx_wpViewObject;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryTrueStyle(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryTrueStyle *somTD_WPDevCPUEx_wpQueryTrueStyle;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpUnlockObject(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpUnlockObject *somTD_WPDevCPUEx_wpUnlockObject;
typedef void   SOMLINK somTP_WPDevCPUEx_wpObjectReady(WPDevCPUEx *somSelf, 
		ULONG ulCode, 
		WPObject* refObject);
typedef somTP_WPDevCPUEx_wpObjectReady *somTD_WPDevCPUEx_wpObjectReady;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpIsObjectInitialized(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpIsObjectInitialized *somTD_WPDevCPUEx_wpIsObjectInitialized;
typedef WPObject*   SOMLINK somTP_WPDevCPUEx_wpCreateShadowObjectExt(WPDevCPUEx *somSelf, 
		WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass);
typedef somTP_WPDevCPUEx_wpCreateShadowObjectExt *somTD_WPDevCPUEx_wpCreateShadowObjectExt;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpCnrDeleteUseItem(WPDevCPUEx *somSelf, 
		HWND hwndCnr);
typedef somTP_WPDevCPUEx_wpCnrDeleteUseItem *somTD_WPDevCPUEx_wpCnrDeleteUseItem;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpIsDeleteable(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpIsDeleteable *somTD_WPDevCPUEx_wpIsDeleteable;
typedef PMINIRECORDCORE   SOMLINK somTP_WPDevCPUEx_wpQueryCoreRecord(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryCoreRecord *somTD_WPDevCPUEx_wpQueryCoreRecord;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetObjectID(WPDevCPUEx *somSelf, 
		PSZ pszObjectID);
typedef somTP_WPDevCPUEx_wpSetObjectID *somTD_WPDevCPUEx_wpSetObjectID;
typedef PSZ   SOMLINK somTP_WPDevCPUEx_wpQueryObjectID(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryObjectID *somTD_WPDevCPUEx_wpQueryObjectID;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetDefaultIconPos(WPDevCPUEx *somSelf, 
		PPOINTL pPointl);
typedef somTP_WPDevCPUEx_wpSetDefaultIconPos *somTD_WPDevCPUEx_wpSetDefaultIconPos;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpQueryDefaultIconPos(WPDevCPUEx *somSelf, 
		PPOINTL pPointl);
typedef somTP_WPDevCPUEx_wpQueryDefaultIconPos *somTD_WPDevCPUEx_wpQueryDefaultIconPos;
typedef void   SOMLINK somTP_WPDevCPUEx_wpCnrRefreshDetails(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpCnrRefreshDetails *somTD_WPDevCPUEx_wpCnrRefreshDetails;
typedef PVIEWITEM   SOMLINK somTP_WPDevCPUEx_wpFindViewItem(WPDevCPUEx *somSelf, 
		ULONG flViews, 
		PVIEWITEM pCurrentItem);
typedef somTP_WPDevCPUEx_wpFindViewItem *somTD_WPDevCPUEx_wpFindViewItem;
typedef void   SOMLINK somTP_WPDevCPUEx_wpLockObject(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpLockObject *somTD_WPDevCPUEx_wpLockObject;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpIsLocked(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpIsLocked *somTD_WPDevCPUEx_wpIsLocked;
typedef PULONG   SOMLINK somTP_WPDevCPUEx_wpQueryContainerFlagPtr(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryContainerFlagPtr *somTD_WPDevCPUEx_wpQueryContainerFlagPtr;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpWaitForClose(WPDevCPUEx *somSelf, 
		LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose);
typedef somTP_WPDevCPUEx_wpWaitForClose *somTD_WPDevCPUEx_wpWaitForClose;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetMenuStyle(WPDevCPUEx *somSelf, 
		ULONG ulStyle);
typedef somTP_WPDevCPUEx_wpSetMenuStyle *somTD_WPDevCPUEx_wpSetMenuStyle;
typedef ULONG   SOMLINK somTP_WPDevCPUEx_wpQueryMenuStyle(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_wpQueryMenuStyle *somTD_WPDevCPUEx_wpQueryMenuStyle;
typedef BOOL   SOMLINK somTP_WPDevCPUEx_wpSetStyle(WPDevCPUEx *somSelf, 
		ULONG ulNewStyle);
typedef somTP_WPDevCPUEx_wpSetStyle *somTD_WPDevCPUEx_wpSetStyle;
typedef void   SOMLINK somTP_WPDevCPUEx_somInit(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somInit *somTD_WPDevCPUEx_somInit;
typedef void   SOMLINK somTP_WPDevCPUEx_somUninit(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somUninit *somTD_WPDevCPUEx_somUninit;
typedef void   SOMLINK somTP_WPDevCPUEx_somDefaultCopyInit(WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultCopyInit *somTD_WPDevCPUEx_somDefaultCopyInit;
typedef WPDevCPUEx*   SOMLINK somTP_WPDevCPUEx_somDefaultAssign(WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultAssign *somTD_WPDevCPUEx_somDefaultAssign;
typedef void   SOMLINK somTP_WPDevCPUEx_somDefaultConstCopyInit(WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultConstCopyInit *somTD_WPDevCPUEx_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_WPDevCPUEx_somDefaultVCopyInit(WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultVCopyInit *somTD_WPDevCPUEx_somDefaultVCopyInit;
typedef void   SOMLINK somTP_WPDevCPUEx_somDefaultConstVCopyInit(WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultConstVCopyInit *somTD_WPDevCPUEx_somDefaultConstVCopyInit;
typedef WPDevCPUEx*   SOMLINK somTP_WPDevCPUEx_somDefaultConstAssign(WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultConstAssign *somTD_WPDevCPUEx_somDefaultConstAssign;
typedef WPDevCPUEx*   SOMLINK somTP_WPDevCPUEx_somDefaultVAssign(WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultVAssign *somTD_WPDevCPUEx_somDefaultVAssign;
typedef WPDevCPUEx*   SOMLINK somTP_WPDevCPUEx_somDefaultConstVAssign(WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_WPDevCPUEx_somDefaultConstVAssign *somTD_WPDevCPUEx_somDefaultConstVAssign;
typedef void   SOMLINK somTP_WPDevCPUEx_somFree(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somFree *somTD_WPDevCPUEx_somFree;
typedef M_WPDevCPUEx*   SOMLINK somTP_WPDevCPUEx_somGetClass(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somGetClass *somTD_WPDevCPUEx_somGetClass;
typedef string   SOMLINK somTP_WPDevCPUEx_somGetClassName(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somGetClassName *somTD_WPDevCPUEx_somGetClassName;
typedef long   SOMLINK somTP_WPDevCPUEx_somGetSize(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somGetSize *somTD_WPDevCPUEx_somGetSize;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somIsA(WPDevCPUEx *somSelf, 
		SOMClass* aClassObj);
typedef somTP_WPDevCPUEx_somIsA *somTD_WPDevCPUEx_somIsA;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somIsInstanceOf(WPDevCPUEx *somSelf, 
		SOMClass* aClassObj);
typedef somTP_WPDevCPUEx_somIsInstanceOf *somTD_WPDevCPUEx_somIsInstanceOf;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somRespondsTo(WPDevCPUEx *somSelf, 
		somId mId);
typedef somTP_WPDevCPUEx_somRespondsTo *somTD_WPDevCPUEx_somRespondsTo;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somDispatch(WPDevCPUEx *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_WPDevCPUEx_somDispatch *somTD_WPDevCPUEx_somDispatch;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somClassDispatch(WPDevCPUEx *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_WPDevCPUEx_somClassDispatch *somTD_WPDevCPUEx_somClassDispatch;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somCastObj(WPDevCPUEx *somSelf, 
		SOMClass* cls);
typedef somTP_WPDevCPUEx_somCastObj *somTD_WPDevCPUEx_somCastObj;
typedef boolean   SOMLINK somTP_WPDevCPUEx_somResetObj(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somResetObj *somTD_WPDevCPUEx_somResetObj;
typedef void   SOMLINK somTP_WPDevCPUEx_somDispatchV(WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPDevCPUEx_somDispatchV *somTD_WPDevCPUEx_somDispatchV;
typedef long   SOMLINK somTP_WPDevCPUEx_somDispatchL(WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPDevCPUEx_somDispatchL *somTD_WPDevCPUEx_somDispatchL;
typedef void*   SOMLINK somTP_WPDevCPUEx_somDispatchA(WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPDevCPUEx_somDispatchA *somTD_WPDevCPUEx_somDispatchA;
typedef double   SOMLINK somTP_WPDevCPUEx_somDispatchD(WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_WPDevCPUEx_somDispatchD *somTD_WPDevCPUEx_somDispatchD;
typedef SOMObject*   SOMLINK somTP_WPDevCPUEx_somPrintSelf(WPDevCPUEx *somSelf);
typedef somTP_WPDevCPUEx_somPrintSelf *somTD_WPDevCPUEx_somPrintSelf;
typedef void   SOMLINK somTP_WPDevCPUEx_somDumpSelf(WPDevCPUEx *somSelf, 
		long level);
typedef somTP_WPDevCPUEx_somDumpSelf *somTD_WPDevCPUEx_somDumpSelf;
typedef void   SOMLINK somTP_WPDevCPUEx_somDumpSelfInt(WPDevCPUEx *somSelf, 
		long level);
typedef somTP_WPDevCPUEx_somDumpSelfInt *somTD_WPDevCPUEx_somDumpSelfInt;
}

#endif /* WPDevCPUEx_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevCPUEx
 */
class WPDevCPUEx : public WPDevCPU
{
public:

// WPDevCPUEx::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevCPUEx) WPDevCPUExNewClass(WPDevCPUEx_MajorVersion,WPDevCPUEx_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevCPUEx,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevCPUEx));
}

// WPDevCPUEx::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

WPDevCPUEx& operator=(WPDevCPUEx& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevCPUEx()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevCPUEx(WPDevCPUEx* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
WPDevCPUEx(const WPDevCPUEx* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: wpAddDeviceDevice1Page */
ULONG   wpAddDeviceDevice1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceDevice1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceDevice2Page */
ULONG   wpAddDeviceDevice2Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceDevice2Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceDMA1Page */
ULONG   wpAddDeviceDMA1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceDMA1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceIRQ1Page */
ULONG   wpAddDeviceIRQ1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceIRQ1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceMemory1Page */
ULONG   wpAddDeviceMemory1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceMemory1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceIO1Page */
ULONG   wpAddDeviceIO1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPDevice,wpAddDeviceIO1Page)
	(this,hwndNotebook);
}


/* method: wpAddSettingsPages */
BOOL   wpAddSettingsPages(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAddSettingsPages)
	(this,hwndNotebook);
}


/* method: wpInitData */
void   wpInitData()
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpInitData)
	(this);
}


/* method: wpModifyPopupMenu */
BOOL   wpModifyPopupMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpModifyPopupMenu)
	(this,hwndMenu,hwndCnr,iPosition);
}


/* method: wpQueryDetailsData */
ULONG   wpQueryDetailsData(PVOID* ppDetailsData, 
		PULONG pcp)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryDetailsData)
	(this,ppDetailsData,pcp);
}


/* method: wpRestoreState */
BOOL   wpRestoreState(ULONG ulReserved)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRestoreState)
	(this,ulReserved);
}


/* method: wpSaveState */
BOOL   wpSaveState()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveState)
	(this);
}


/* method: wpSetup */
BOOL   wpSetup(PSZ pszSetupString)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetup)
	(this,pszSetupString);
}


/* method: wpUnInitData */
void   wpUnInitData()
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpUnInitData)
	(this);
}


/* method: wpCnrInsertObject */
PMINIRECORDCORE   wpCnrInsertObject(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PMINIRECORDCORE preccParent, 
		PRECORDINSERT pRecInsert)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCnrInsertObject)
	(this,hwndCnr,pptlIcon,preccParent,pRecInsert);
}


/* method: wpQueryHandle */
HOBJECT   wpQueryHandle()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryHandle)
	(this);
}


/* method: wpCopyObject */
WPObject*   wpCopyObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCopyObject)
	(this,Folder,fLock);
}


/* method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: wpQueryIcon */
HPOINTER   wpQueryIcon()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryIcon)
	(this);
}


/* method: wpSaveImmediate */
BOOL   wpSaveImmediate()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveImmediate)
	(this);
}


/* method: wpIdentify */
BOOL   wpIdentify(PSZ pszIdentity)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpIdentify)
	(this,pszIdentity);
}


/* method: wpAddObjectGeneralPage */
ULONG   wpAddObjectGeneralPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAddObjectGeneralPage)
	(this,hwndNotebook);
}


/* method: wpAddObjectGeneralPage2 */
ULONG   wpAddObjectGeneralPage2(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAddObjectGeneralPage2)
	(this,hwndNotebook);
}


/* method: wpAddObjectWindowPage */
ULONG   wpAddObjectWindowPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAddObjectWindowPage)
	(this,hwndNotebook);
}


/* method: wpAddToObjUseList */
BOOL   wpAddToObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAddToObjUseList)
	(this,pUseItem);
}


/* method: wpAllocMem */
PBYTE   wpAllocMem(ULONG cbBytes, 
		PULONG prc)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAllocMem)
	(this,cbBytes,prc);
}


/* method: wpAppendObject */
BOOL32   wpAppendObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAppendObject)
	(this,targetObject,fMove);
}


/* method: wpAssertObjectMutexSem */
BOOL   wpAssertObjectMutexSem()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpAssertObjectMutexSem)
	(this);
}


/* method: wpClose */
BOOL   wpClose()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpClose)
	(this);
}


/* method: wpCnrRemoveObject */
BOOL   wpCnrRemoveObject(HWND hwndCnr)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCnrRemoveObject)
	(this,hwndCnr);
}


/* method: wpCnrSetEmphasis */
BOOL   wpCnrSetEmphasis(ULONG ulEmphasisAttr, 
		BOOL fTurnOn)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCnrSetEmphasis)
	(this,ulEmphasisAttr,fTurnOn);
}


/* method: wpConfirmDelete */
ULONG   wpConfirmDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpConfirmDelete)
	(this,fConfirmations);
}


/* method: wpConfirmObjectTitle */
ULONG   wpConfirmObjectTitle(WPFolder* Folder, 
		WPObject** ppDuplicate, 
		PSZ pszTitle, 
		ULONG cbTitle, 
		ULONG menuID)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpConfirmObjectTitle)
	(this,Folder,ppDuplicate,pszTitle,cbTitle,menuID);
}


/* method: wpCopiedFromTemplate */
void   wpCopiedFromTemplate()
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCopiedFromTemplate)
	(this);
}


/* method: wpCreateAnother */
WPObject*   wpCreateAnother(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCreateAnother)
	(this,pszTitle,pszSetupEnv,Folder);
}


/* method: wpCreateFromTemplate */
WPObject*   wpCreateFromTemplate(WPFolder* folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCreateFromTemplate)
	(this,folder,fLock);
}


/* method: wpCreateShadowObject */
WPObject*   wpCreateShadowObject(WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCreateShadowObject)
	(this,Folder,fLock);
}


/* method: wpDelete */
ULONG   wpDelete(ULONG fConfirmations)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDelete)
	(this,fConfirmations);
}


/* method: wpDeleteFromObjUseList */
BOOL   wpDeleteFromObjUseList(PUSEITEM pUseItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDeleteFromObjUseList)
	(this,pUseItem);
}


/* method: wpDisplayHelp */
BOOL   wpDisplayHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDisplayHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpDisplayMenu */
HWND   wpDisplayMenu(HWND hwndOwner, 
		HWND hwndClient, 
		POINTL* ptlPopupPt, 
		ULONG ulMenuType, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDisplayMenu)
	(this,hwndOwner,hwndClient,ptlPopupPt,ulMenuType,ulReserved);
}


/* method: wpDoesObjectMatch */
BOOL   wpDoesObjectMatch(PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDoesObjectMatch)
	(this,pvoidExtendedCriteria);
}


/* method: wpDraggedOverObject */
MRESULT   wpDraggedOverObject(WPObject* DraggedOverObject)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDraggedOverObject)
	(this,DraggedOverObject);
}


/* method: wpDragOver */
MRESULT   wpDragOver(HWND hwndCnr, 
		PDRAGINFO pdrgInfo)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDragOver)
	(this,hwndCnr,pdrgInfo);
}


/* method: wpDrop */
MRESULT   wpDrop(HWND hwndCnr, 
		PDRAGINFO pdrgInfo, 
		PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDrop)
	(this,hwndCnr,pdrgInfo,pdrgItem);
}


/* method: wpDroppedOnObject */
BOOL   wpDroppedOnObject(WPObject* DroppedOnObject)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpDroppedOnObject)
	(this,DroppedOnObject);
}


/* method: wpEndConversation */
MRESULT   wpEndConversation(ULONG ulItemID, 
		ULONG flResult)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpEndConversation)
	(this,ulItemID,flResult);
}


/* method: wpFilterPopupMenu */
ULONG   wpFilterPopupMenu(ULONG ulFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFilterPopupMenu)
	(this,ulFlags,hwndCnr,fMultiSelect);
}


/* method: wpFilterMenu */
BOOL   wpFilterMenu(FILTERFLAGS* pFlags, 
		HWND hwndCnr, 
		BOOL fMultiSelect, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFilterMenu)
	(this,pFlags,hwndCnr,fMultiSelect,ulMenuType,ulView,ulReserved);
}


/* method: wpFindUseItem */
PUSEITEM   wpFindUseItem(ULONG type, 
		PUSEITEM pCurrentItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFindUseItem)
	(this,type,pCurrentItem);
}


/* method: wpFormatDragItem */
BOOL   wpFormatDragItem(PDRAGITEM pdrgItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFormatDragItem)
	(this,pdrgItem);
}


/* method: wpFree */
BOOL   wpFree()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFree)
	(this);
}


/* method: wpFreeMem */
BOOL   wpFreeMem(PBYTE pByte)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFreeMem)
	(this,pByte);
}


/* method: wpHide */
BOOL   wpHide()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpHide)
	(this);
}


/* method: wpInsertPopupMenuItems */
BOOL   wpInsertPopupMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpInsertPopupMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpInsertMenuItems */
BOOL   wpInsertMenuItems(HWND hwndMenu, 
		ULONG iPosition, 
		HMODULE hmod, 
		ULONG MenuID, 
		ULONG SubMenuID)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpInsertMenuItems)
	(this,hwndMenu,iPosition,hmod,MenuID,SubMenuID);
}


/* method: wpInsertSettingsPage */
ULONG   wpInsertSettingsPage(HWND hwndNotebook, 
		PPAGEINFO ppageinfo)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpInsertSettingsPage)
	(this,hwndNotebook,ppageinfo);
}


/* method: wpMenuItemHelpSelected */
BOOL   wpMenuItemHelpSelected(ULONG MenuId)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpMenuItemHelpSelected)
	(this,MenuId);
}


/* method: wpMenuItemSelected */
BOOL   wpMenuItemSelected(HWND hwndFrame, 
		ULONG ulMenuId)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpMenuItemSelected)
	(this,hwndFrame,ulMenuId);
}


/* method: wpModifyMenu */
BOOL   wpModifyMenu(HWND hwndMenu, 
		HWND hwndCnr, 
		ULONG iPosition, 
		ULONG ulMenuType, 
		ULONG ulView, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpModifyMenu)
	(this,hwndMenu,hwndCnr,iPosition,ulMenuType,ulView,ulReserved);
}


/* method: wpMoveObject */
BOOL   wpMoveObject(WPFolder* Folder)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpMoveObject)
	(this,Folder);
}


/* method: wpOpen */
HWND   wpOpen(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpOpen)
	(this,hwndCnr,ulView,param);
}


/* method: wpPrintObject */
BOOL   wpPrintObject(PPRINTDEST pPrintDest, 
		ULONG ulReserved)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpPrintObject)
	(this,pPrintDest,ulReserved);
}


/* method: wpQueryConcurrentView */
ULONG   wpQueryConcurrentView()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryConcurrentView)
	(this);
}


/* method: wpQueryButtonAppearance */
ULONG   wpQueryButtonAppearance()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryButtonAppearance)
	(this);
}


/* method: wpQueryConfirmations */
ULONG   wpQueryConfirmations()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryConfirmations)
	(this);
}


/* method: wpQueryDefaultHelp */
BOOL   wpQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryDefaultHelp)
	(this,pHelpPanelId,HelpLibrary);
}


/* method: wpQueryDefaultView */
ULONG   wpQueryDefaultView()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryDefaultView)
	(this);
}


/* method: wpQueryError */
ULONG   wpQueryError()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryError)
	(this);
}


/* method: wpSetFolder */
BOOL   wpSetFolder(WPObject* container)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetFolder)
	(this,container);
}


/* method: wpQueryFolder */
WPObject*   wpQueryFolder()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryFolder)
	(this);
}


/* method: wpQueryIconData */
ULONG   wpQueryIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryIconData)
	(this,pIconInfo);
}


/* method: wpQueryMinWindow */
ULONG   wpQueryMinWindow()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryMinWindow)
	(this);
}


/* method: wpQueryNameClashOptions */
ULONG   wpQueryNameClashOptions(ULONG menuID)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryNameClashOptions)
	(this,menuID);
}


/* method: wpQueryStyle */
ULONG   wpQueryStyle()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryStyle)
	(this);
}


/* method: wpSetTaskRec */
BOOL32   wpSetTaskRec(PTASKREC pNew, 
		PTASKREC pOld)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetTaskRec)
	(this,pNew,pOld);
}


/* method: wpFindTaskRec */
PTASKREC   wpFindTaskRec()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFindTaskRec)
	(this);
}


/* method: wpQueryTitle */
PSZ   wpQueryTitle()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryTitle)
	(this);
}


/* method: wpRegisterView */
BOOL   wpRegisterView(HWND hwndFrame, 
		PSZ pszViewTitle)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRegisterView)
	(this,hwndFrame,pszViewTitle);
}


/* method: wpReleaseObjectMutexSem */
ULONG   wpReleaseObjectMutexSem()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpReleaseObjectMutexSem)
	(this);
}


/* method: wpRender */
MRESULT   wpRender(PDRAGTRANSFER pdxfer)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRender)
	(this,pdxfer);
}


/* method: wpRenderComplete */
MRESULT   wpRenderComplete(PDRAGTRANSFER pdxfer, 
		ULONG ulResult)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRenderComplete)
	(this,pdxfer,ulResult);
}


/* method: wpReplaceObject */
BOOL32   wpReplaceObject(WPObject* targetObject, 
		BOOL32 fMove)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpReplaceObject)
	(this,targetObject,fMove);
}


/* method: wpRequestObjectMutexSem */
ULONG   wpRequestObjectMutexSem(ULONG ulTimeout)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRequestObjectMutexSem)
	(this,ulTimeout);
}


/* method: wpRestore */
BOOL   wpRestore()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRestore)
	(this);
}


/* method: wpRestoreData */
BOOL   wpRestoreData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRestoreData)
	(this,pszClass,ulKey,pValue,pcbValue);
}


/* method: wpRestoreLong */
BOOL   wpRestoreLong(PSZ pszClass, 
		ULONG ulKey, 
		PULONG pulValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRestoreLong)
	(this,pszClass,ulKey,pulValue);
}


/* method: wpRestoreString */
BOOL   wpRestoreString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpRestoreString)
	(this,pszClass,ulKey,pszValue,pcbValue);
}


/* method: wpSaveData */
BOOL   wpSaveData(PSZ pszClass, 
		ULONG ulKey, 
		PBYTE pValue, 
		ULONG cbValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveData)
	(this,pszClass,ulKey,pValue,cbValue);
}


/* method: wpSaveDeferred */
BOOL   wpSaveDeferred()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveDeferred)
	(this);
}


/* method: wpSaveLong */
BOOL   wpSaveLong(PSZ pszClass, 
		ULONG ulKey, 
		ULONG ulValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveLong)
	(this,pszClass,ulKey,ulValue);
}


/* method: wpSaveString */
BOOL   wpSaveString(PSZ pszClass, 
		ULONG ulKey, 
		PSZ pszValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSaveString)
	(this,pszClass,ulKey,pszValue);
}


/* method: wpScanSetupString */
BOOL   wpScanSetupString(PSZ pszSetupString, 
		PSZ pszKey, 
		PSZ pszValue, 
		PULONG pcbValue)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpScanSetupString)
	(this,pszSetupString,pszKey,pszValue,pcbValue);
}


/* method: wpSetConcurrentView */
void   wpSetConcurrentView(ULONG ulCCView)
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetConcurrentView)
	(this,ulCCView);
}


/* method: wpSetButtonAppearance */
void   wpSetButtonAppearance(ULONG ulButtonType)
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetButtonAppearance)
	(this,ulButtonType);
}


/* method: wpSetDefaultHelp */
BOOL   wpSetDefaultHelp(ULONG HelpPanelId, 
		PSZ HelpLibrary)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetDefaultHelp)
	(this,HelpPanelId,HelpLibrary);
}


/* method: wpSetDefaultView */
BOOL   wpSetDefaultView(ULONG ulView)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetDefaultView)
	(this,ulView);
}


/* method: wpSetError */
BOOL   wpSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetError)
	(this,ulErrorId);
}


/* method: wpQueryScreenGroupID */
SGID   wpQueryScreenGroupID(SGID sgidPrevSgId)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryScreenGroupID)
	(this,sgidPrevSgId);
}


/* method: wpSetupOnce */
BOOL   wpSetupOnce(PSZ pszSetupString)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetupOnce)
	(this,pszSetupString);
}


/* method: wpSetIcon */
BOOL   wpSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetIcon)
	(this,hptrNewIcon);
}


/* method: wpSetIconData */
BOOL   wpSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetIconData)
	(this,pIconInfo);
}


/* method: wpSetMinWindow */
void   wpSetMinWindow(ULONG ulMinWindow)
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetMinWindow)
	(this,ulMinWindow);
}


/* method: wpModifyStyle */
BOOL   wpModifyStyle(ULONG ulStyleFlags, 
		ULONG ulStyleMask)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpModifyStyle)
	(this,ulStyleFlags,ulStyleMask);
}


/* method: wpSetTitle */
BOOL   wpSetTitle(PSZ pszNewTitle)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetTitle)
	(this,pszNewTitle);
}


/* method: wpSwitchTo */
BOOL   wpSwitchTo(ULONG View)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSwitchTo)
	(this,View);
}


/* method: wpViewObject */
HWND   wpViewObject(HWND hwndCnr, 
		ULONG ulView, 
		ULONG param)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpViewObject)
	(this,hwndCnr,ulView,param);
}


/* procedure: wpQueryTrueStyle */
static ULONG   wpQueryTrueStyle(WPDevCPUEx *somSelf)
{
   return ((somTD_WPDevCPUEx_wpQueryTrueStyle)WPObjectClassData.wpQueryTrueStyle)
	(somSelf);
}


/* method: wpUnlockObject */
BOOL   wpUnlockObject()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpUnlockObject)
	(this);
}


/* method: wpObjectReady */
void   wpObjectReady(ULONG ulCode, 
		WPObject* refObject)
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpObjectReady)
	(this,ulCode,refObject);
}


/* method: wpIsObjectInitialized */
BOOL   wpIsObjectInitialized()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpIsObjectInitialized)
	(this);
}


/* method: wpCreateShadowObjectExt */
WPObject*   wpCreateShadowObjectExt(WPFolder* Folder, 
		BOOL fLock, 
		PSZ pszSetup, 
		M_WPObject* shadowClass)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCreateShadowObjectExt)
	(this,Folder,fLock,pszSetup,shadowClass);
}


/* method: wpCnrDeleteUseItem */
BOOL   wpCnrDeleteUseItem(HWND hwndCnr)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCnrDeleteUseItem)
	(this,hwndCnr);
}


/* method: wpIsDeleteable */
BOOL   wpIsDeleteable()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpIsDeleteable)
	(this);
}


/* method: wpQueryCoreRecord */
PMINIRECORDCORE   wpQueryCoreRecord()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryCoreRecord)
	(this);
}


/* method: wpSetObjectID */
BOOL   wpSetObjectID(PSZ pszObjectID)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetObjectID)
	(this,pszObjectID);
}


/* method: wpQueryObjectID */
PSZ   wpQueryObjectID()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryObjectID)
	(this);
}


/* method: wpSetDefaultIconPos */
BOOL   wpSetDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetDefaultIconPos)
	(this,pPointl);
}


/* method: wpQueryDefaultIconPos */
BOOL   wpQueryDefaultIconPos(PPOINTL pPointl)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryDefaultIconPos)
	(this,pPointl);
}


/* method: wpCnrRefreshDetails */
void   wpCnrRefreshDetails()
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpCnrRefreshDetails)
	(this);
}


/* method: wpFindViewItem */
PVIEWITEM   wpFindViewItem(ULONG flViews, 
		PVIEWITEM pCurrentItem)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpFindViewItem)
	(this,flViews,pCurrentItem);
}


/* method: wpLockObject */
void   wpLockObject()
{
   SOM_ResolveD(this,WPDevCPUEx,WPObject,wpLockObject)
	(this);
}


/* method: wpIsLocked */
BOOL   wpIsLocked()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpIsLocked)
	(this);
}


/* method: wpQueryContainerFlagPtr */
PULONG   wpQueryContainerFlagPtr()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryContainerFlagPtr)
	(this);
}


/* method: wpWaitForClose */
ULONG   wpWaitForClose(LHANDLE lhView, 
		ULONG ulViews, 
		long lTimeOut, 
		BOOL bAutoClose)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpWaitForClose)
	(this,lhView,ulViews,lTimeOut,bAutoClose);
}


/* method: wpSetMenuStyle */
BOOL   wpSetMenuStyle(ULONG ulStyle)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetMenuStyle)
	(this,ulStyle);
}


/* method: wpQueryMenuStyle */
ULONG   wpQueryMenuStyle()
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpQueryMenuStyle)
	(this);
}


/* method: wpSetStyle */
BOOL   wpSetStyle(ULONG ulNewStyle)
{
   return SOM_ResolveD(this,WPDevCPUEx,WPObject,wpSetStyle)
	(this,ulNewStyle);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
WPDevCPUEx*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
WPDevCPUEx*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
WPDevCPUEx*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
WPDevCPUEx*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
M_WPDevCPUEx*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   WPDevCPUEx_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   WPDevCPUEx_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPDevCPUEx,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   WPDevCPUEx_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   WPDevCPUEx_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   WPDevCPUEx_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   WPDevCPUEx_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,WPDevCPUEx,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,WPDevCPUEx,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* WPDevCPUEx */



#endif       /* SOM_WPDevCPUEx_xh */

#ifndef SOM_M_WPDevCPUEx_xh
#define SOM_M_WPDevCPUEx_xh

class M_WPDevCPUEx;

#define M_WPDevCPUEx_MajorVersion 1
#define M_WPDevCPUEx_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevCPU_xh
#include <wpcpu.xh>
#endif

#ifndef M_WPDevCPUEx_API
#define M_WPDevCPUEx_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevCPUEx is a metaclass for WPDevCPUEx. Make sure WPDevCPUEx is known.
 */
class WPDevCPUEx;


/* A procedure to create the M_WPDevCPUEx Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevCPUExNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevCPUEx class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevCPUExClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevCPUExClassData;
#define _M_WPDevCPUEx M_WPDevCPUExClassData.classObject

/* The API to parentMtabs for M_WPDevCPUEx, and the instance data it introduces. */
SOMEXTERN struct M_WPDevCPUExCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevCPUExCClassData;

/*
 * -- Typedefs for M_WPDevCPUEx Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_M_WPDevCPUEx_wpclsInitData(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsInitData *somTD_M_WPDevCPUEx_wpclsInitData;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryIconData(M_WPDevCPUEx *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_WPDevCPUEx_wpclsQueryIconData *somTD_M_WPDevCPUEx_wpclsQueryIconData;
typedef PSZ   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryTitle(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryTitle *somTD_M_WPDevCPUEx_wpclsQueryTitle;
typedef void   SOMLINK somTP_M_WPDevCPUEx_wpclsUnInitData(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsUnInitData *somTD_M_WPDevCPUEx_wpclsUnInitData;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryDefaultHelp(M_WPDevCPUEx *somSelf, 
		PULONG pHelpPanelId, 
		PSZ pszHelpLibrary);
typedef somTP_M_WPDevCPUEx_wpclsQueryDefaultHelp *somTD_M_WPDevCPUEx_wpclsQueryDefaultHelp;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryDefaultView(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryDefaultView *somTD_M_WPDevCPUEx_wpclsQueryDefaultView;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryDetailsInfo(M_WPDevCPUEx *somSelf, 
		PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize);
typedef somTP_M_WPDevCPUEx_wpclsQueryDetailsInfo *somTD_M_WPDevCPUEx_wpclsQueryDetailsInfo;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryStyle(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryStyle *somTD_M_WPDevCPUEx_wpclsQueryStyle;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsObjectFromHandle(M_WPDevCPUEx *somSelf, 
		HOBJECT hObject);
typedef somTP_M_WPDevCPUEx_wpclsObjectFromHandle *somTD_M_WPDevCPUEx_wpclsObjectFromHandle;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsCreateDefaultTemplates(M_WPDevCPUEx *somSelf, 
		WPObject* Folder);
typedef somTP_M_WPDevCPUEx_wpclsCreateDefaultTemplates *somTD_M_WPDevCPUEx_wpclsCreateDefaultTemplates;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsMakeAwake(M_WPDevCPUEx *somSelf, 
		PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser);
typedef somTP_M_WPDevCPUEx_wpclsMakeAwake *somTD_M_WPDevCPUEx_wpclsMakeAwake;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsNew(M_WPDevCPUEx *somSelf, 
		PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock);
typedef somTP_M_WPDevCPUEx_wpclsNew *somTD_M_WPDevCPUEx_wpclsNew;
typedef PCLASSDETAILS   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryDetails(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryDetails *somTD_M_WPDevCPUEx_wpclsQueryDetails;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryExtendedCriteria(M_WPDevCPUEx *somSelf, 
		PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria);
typedef somTP_M_WPDevCPUEx_wpclsQueryExtendedCriteria *somTD_M_WPDevCPUEx_wpclsQueryExtendedCriteria;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryFolder(M_WPDevCPUEx *somSelf, 
		PSZ pszLocation, 
		BOOL fLock);
typedef somTP_M_WPDevCPUEx_wpclsQueryFolder *somTD_M_WPDevCPUEx_wpclsQueryFolder;
typedef HPOINTER   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryIcon(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryIcon *somTD_M_WPDevCPUEx_wpclsQueryIcon;
typedef void   SOMLINK somTP_M_WPDevCPUEx_wpclsQuerySearchInfo(M_WPDevCPUEx *somSelf, 
		M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize);
typedef somTP_M_WPDevCPUEx_wpclsQuerySearchInfo *somTD_M_WPDevCPUEx_wpclsQuerySearchInfo;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsFindObjectFirst(M_WPDevCPUEx *somSelf, 
		PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_WPDevCPUEx_wpclsFindObjectFirst *somTD_M_WPDevCPUEx_wpclsFindObjectFirst;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsFindObjectNext(M_WPDevCPUEx *somSelf, 
		HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount);
typedef somTP_M_WPDevCPUEx_wpclsFindObjectNext *somTD_M_WPDevCPUEx_wpclsFindObjectNext;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsFindObjectEnd(M_WPDevCPUEx *somSelf, 
		HFIND hFind);
typedef somTP_M_WPDevCPUEx_wpclsFindObjectEnd *somTD_M_WPDevCPUEx_wpclsFindObjectEnd;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsSetError(M_WPDevCPUEx *somSelf, 
		ULONG ulErrorId);
typedef somTP_M_WPDevCPUEx_wpclsSetError *somTD_M_WPDevCPUEx_wpclsSetError;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryError(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryError *somTD_M_WPDevCPUEx_wpclsQueryError;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsQuerySettingsPageSize(M_WPDevCPUEx *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_WPDevCPUEx_wpclsQuerySettingsPageSize *somTD_M_WPDevCPUEx_wpclsQuerySettingsPageSize;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryObject(M_WPDevCPUEx *somSelf, 
		HOBJECT hObject);
typedef somTP_M_WPDevCPUEx_wpclsQueryObject *somTD_M_WPDevCPUEx_wpclsQueryObject;
typedef ULONG   SOMLINK somTP_M_WPDevCPUEx_wpclsQueryButtonAppearance(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsQueryButtonAppearance *somTD_M_WPDevCPUEx_wpclsQueryButtonAppearance;
typedef void   SOMLINK somTP_M_WPDevCPUEx_wpclsDecUsage(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsDecUsage *somTD_M_WPDevCPUEx_wpclsDecUsage;
typedef void   SOMLINK somTP_M_WPDevCPUEx_wpclsIncUsage(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_wpclsIncUsage *somTD_M_WPDevCPUEx_wpclsIncUsage;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsInsertMultipleObjects(M_WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords);
typedef somTP_M_WPDevCPUEx_wpclsInsertMultipleObjects *somTD_M_WPDevCPUEx_wpclsInsertMultipleObjects;
typedef WPObject*   SOMLINK somTP_M_WPDevCPUEx_wpclsFindOneObject(M_WPDevCPUEx *somSelf, 
		HWND hwndOwner, 
		PSZ pszFindParams);
typedef somTP_M_WPDevCPUEx_wpclsFindOneObject *somTD_M_WPDevCPUEx_wpclsFindOneObject;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsSetSettingsPageSize(M_WPDevCPUEx *somSelf, 
		PSIZEL pSizl);
typedef somTP_M_WPDevCPUEx_wpclsSetSettingsPageSize *somTD_M_WPDevCPUEx_wpclsSetSettingsPageSize;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsSetIconData(M_WPDevCPUEx *somSelf, 
		PICONINFO pIconInfo);
typedef somTP_M_WPDevCPUEx_wpclsSetIconData *somTD_M_WPDevCPUEx_wpclsSetIconData;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsSetIcon(M_WPDevCPUEx *somSelf, 
		HPOINTER hptrNewIcon);
typedef somTP_M_WPDevCPUEx_wpclsSetIcon *somTD_M_WPDevCPUEx_wpclsSetIcon;
typedef BOOL   SOMLINK somTP_M_WPDevCPUEx_wpclsRemoveObjects(M_WPDevCPUEx *somSelf, 
		HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll);
typedef somTP_M_WPDevCPUEx_wpclsRemoveObjects *somTD_M_WPDevCPUEx_wpclsRemoveObjects;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somUninit(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somUninit *somTD_M_WPDevCPUEx_somUninit;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somClassReady(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somClassReady *somTD_M_WPDevCPUEx_somClassReady;
typedef WPDevCPUEx*   SOMLINK somTP_M_WPDevCPUEx_somNew(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somNew *somTD_M_WPDevCPUEx_somNew;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somRenew(M_WPDevCPUEx *somSelf, 
		void* obj);
typedef somTP_M_WPDevCPUEx_somRenew *somTD_M_WPDevCPUEx_somRenew;
typedef long   SOMLINK somTP_M_WPDevCPUEx__get_somDataAlignment(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx__get_somDataAlignment *somTD_M_WPDevCPUEx__get_somDataAlignment;
typedef SOMClass_somOffsets   SOMLINK somTP_M_WPDevCPUEx__get_somInstanceDataOffsets(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx__get_somInstanceDataOffsets *somTD_M_WPDevCPUEx__get_somInstanceDataOffsets;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_WPDevCPUEx__get_somDirectInitClasses(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx__get_somDirectInitClasses *somTD_M_WPDevCPUEx__get_somDirectInitClasses;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somNewNoInit(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somNewNoInit *somTD_M_WPDevCPUEx_somNewNoInit;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somRenewNoInit(M_WPDevCPUEx *somSelf, 
		void* obj);
typedef somTP_M_WPDevCPUEx_somRenewNoInit *somTD_M_WPDevCPUEx_somRenewNoInit;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somRenewNoZero(M_WPDevCPUEx *somSelf, 
		void* obj);
typedef somTP_M_WPDevCPUEx_somRenewNoZero *somTD_M_WPDevCPUEx_somRenewNoZero;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somRenewNoInitNoZero(M_WPDevCPUEx *somSelf, 
		void* obj);
typedef somTP_M_WPDevCPUEx_somRenewNoInitNoZero *somTD_M_WPDevCPUEx_somRenewNoInitNoZero;
typedef somToken   SOMLINK somTP_M_WPDevCPUEx_somAllocate(M_WPDevCPUEx *somSelf, 
		long size);
typedef somTP_M_WPDevCPUEx_somAllocate *somTD_M_WPDevCPUEx_somAllocate;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDeallocate(M_WPDevCPUEx *somSelf, 
		somToken memptr);
typedef somTP_M_WPDevCPUEx_somDeallocate *somTD_M_WPDevCPUEx_somDeallocate;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somInitClass(M_WPDevCPUEx *somSelf, 
		string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPDevCPUEx_somInitClass *somTD_M_WPDevCPUEx_somInitClass;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somInitMIClass(M_WPDevCPUEx *somSelf, 
		long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPDevCPUEx_somInitMIClass *somTD_M_WPDevCPUEx_somInitMIClass;
typedef somMToken   SOMLINK somTP_M_WPDevCPUEx_somAddStaticMethod(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub);
typedef somTP_M_WPDevCPUEx_somAddStaticMethod *somTD_M_WPDevCPUEx_somAddStaticMethod;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somAddDynamicMethod(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub);
typedef somTP_M_WPDevCPUEx_somAddDynamicMethod *somTD_M_WPDevCPUEx_somAddDynamicMethod;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somOverrideSMethod(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somMethodPtr method);
typedef somTP_M_WPDevCPUEx_somOverrideSMethod *somTD_M_WPDevCPUEx_somOverrideSMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPDevCPUEx_somGetApplyStub(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somGetApplyStub *somTD_M_WPDevCPUEx_somGetApplyStub;
typedef somClassDataStructure*   SOMLINK somTP_M_WPDevCPUEx_somGetClassData(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetClassData *somTD_M_WPDevCPUEx_somGetClassData;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somSetClassData(M_WPDevCPUEx *somSelf, 
		somClassDataStructure* cds);
typedef somTP_M_WPDevCPUEx_somSetClassData *somTD_M_WPDevCPUEx_somSetClassData;
typedef somMethodTab*   SOMLINK somTP_M_WPDevCPUEx_somGetClassMtab(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetClassMtab *somTD_M_WPDevCPUEx_somGetClassMtab;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetInstanceOffset(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetInstanceOffset *somTD_M_WPDevCPUEx_somGetInstanceOffset;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetInstancePartSize(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetInstancePartSize *somTD_M_WPDevCPUEx_somGetInstancePartSize;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetInstanceSize(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetInstanceSize *somTD_M_WPDevCPUEx_somGetInstanceSize;
typedef somDToken   SOMLINK somTP_M_WPDevCPUEx_somGetInstanceToken(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetInstanceToken *somTD_M_WPDevCPUEx_somGetInstanceToken;
typedef somDToken   SOMLINK somTP_M_WPDevCPUEx_somGetMemberToken(M_WPDevCPUEx *somSelf, 
		long memberOffset, 
		somDToken instanceToken);
typedef somTP_M_WPDevCPUEx_somGetMemberToken *somTD_M_WPDevCPUEx_somGetMemberToken;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somGetMethodData(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somMethodData* md);
typedef somTP_M_WPDevCPUEx_somGetMethodData *somTD_M_WPDevCPUEx_somGetMethodData;
typedef somMethodProc*   SOMLINK somTP_M_WPDevCPUEx_somGetRdStub(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somGetRdStub *somTD_M_WPDevCPUEx_somGetRdStub;
typedef somId   SOMLINK somTP_M_WPDevCPUEx_somGetMethodDescriptor(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somGetMethodDescriptor *somTD_M_WPDevCPUEx_somGetMethodDescriptor;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetMethodIndex(M_WPDevCPUEx *somSelf, 
		somId id);
typedef somTP_M_WPDevCPUEx_somGetMethodIndex *somTD_M_WPDevCPUEx_somGetMethodIndex;
typedef somMToken   SOMLINK somTP_M_WPDevCPUEx_somGetMethodToken(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somGetMethodToken *somTD_M_WPDevCPUEx_somGetMethodToken;
typedef string   SOMLINK somTP_M_WPDevCPUEx_somGetName(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetName *somTD_M_WPDevCPUEx_somGetName;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somGetNthMethodData(M_WPDevCPUEx *somSelf, 
		long n, 
		somMethodData* md);
typedef somTP_M_WPDevCPUEx_somGetNthMethodData *somTD_M_WPDevCPUEx_somGetNthMethodData;
typedef somId   SOMLINK somTP_M_WPDevCPUEx_somGetNthMethodInfo(M_WPDevCPUEx *somSelf, 
		long n, 
		somId* descriptor);
typedef somTP_M_WPDevCPUEx_somGetNthMethodInfo *somTD_M_WPDevCPUEx_somGetNthMethodInfo;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetNumMethods(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetNumMethods *somTD_M_WPDevCPUEx_somGetNumMethods;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetNumStaticMethods(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetNumStaticMethods *somTD_M_WPDevCPUEx_somGetNumStaticMethods;
typedef SOMClass*   SOMLINK somTP_M_WPDevCPUEx_somGetParent(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetParent *somTD_M_WPDevCPUEx_somGetParent;
typedef SOMClass_SOMClassSequence   SOMLINK somTP_M_WPDevCPUEx_somGetParents(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetParents *somTD_M_WPDevCPUEx_somGetParents;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somGetVersionNumbers(M_WPDevCPUEx *somSelf, 
		long* majorVersion, 
		long* minorVersion);
typedef somTP_M_WPDevCPUEx_somGetVersionNumbers *somTD_M_WPDevCPUEx_somGetVersionNumbers;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somFindMethod(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_WPDevCPUEx_somFindMethod *somTD_M_WPDevCPUEx_somFindMethod;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somFindMethodOk(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somMethodPtr* m);
typedef somTP_M_WPDevCPUEx_somFindMethodOk *somTD_M_WPDevCPUEx_somFindMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_WPDevCPUEx_somFindSMethod(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somFindSMethod *somTD_M_WPDevCPUEx_somFindSMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPDevCPUEx_somFindSMethodOk(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somFindSMethodOk *somTD_M_WPDevCPUEx_somFindSMethodOk;
typedef somMethodPtr   SOMLINK somTP_M_WPDevCPUEx_somLookupMethod(M_WPDevCPUEx *somSelf, 
		somId methodId);
typedef somTP_M_WPDevCPUEx_somLookupMethod *somTD_M_WPDevCPUEx_somLookupMethod;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somCheckVersion(M_WPDevCPUEx *somSelf, 
		long majorVersion, 
		long minorVersion);
typedef somTP_M_WPDevCPUEx_somCheckVersion *somTD_M_WPDevCPUEx_somCheckVersion;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somDescendedFrom(M_WPDevCPUEx *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPDevCPUEx_somDescendedFrom *somTD_M_WPDevCPUEx_somDescendedFrom;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somSupportsMethod(M_WPDevCPUEx *somSelf, 
		somId mId);
typedef somTP_M_WPDevCPUEx_somSupportsMethod *somTD_M_WPDevCPUEx_somSupportsMethod;
typedef somMethodPtr   SOMLINK somTP_M_WPDevCPUEx_somDefinedMethod(M_WPDevCPUEx *somSelf, 
		somMToken method);
typedef somTP_M_WPDevCPUEx_somDefinedMethod *somTD_M_WPDevCPUEx_somDefinedMethod;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somOverrideMtab(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somOverrideMtab *somTD_M_WPDevCPUEx_somOverrideMtab;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDefaultInit(M_WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_M_WPDevCPUEx_somDefaultInit *somTD_M_WPDevCPUEx_somDefaultInit;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDestruct(M_WPDevCPUEx *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_M_WPDevCPUEx_somDestruct *somTD_M_WPDevCPUEx_somDestruct;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDefaultCopyInit(M_WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultCopyInit *somTD_M_WPDevCPUEx_somDefaultCopyInit;
typedef M_WPDevCPUEx*   SOMLINK somTP_M_WPDevCPUEx_somDefaultAssign(M_WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultAssign *somTD_M_WPDevCPUEx_somDefaultAssign;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDefaultConstCopyInit(M_WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultConstCopyInit *somTD_M_WPDevCPUEx_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDefaultVCopyInit(M_WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultVCopyInit *somTD_M_WPDevCPUEx_somDefaultVCopyInit;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDefaultConstVCopyInit(M_WPDevCPUEx *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultConstVCopyInit *somTD_M_WPDevCPUEx_somDefaultConstVCopyInit;
typedef M_WPDevCPUEx*   SOMLINK somTP_M_WPDevCPUEx_somDefaultConstAssign(M_WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultConstAssign *somTD_M_WPDevCPUEx_somDefaultConstAssign;
typedef M_WPDevCPUEx*   SOMLINK somTP_M_WPDevCPUEx_somDefaultVAssign(M_WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultVAssign *somTD_M_WPDevCPUEx_somDefaultVAssign;
typedef M_WPDevCPUEx*   SOMLINK somTP_M_WPDevCPUEx_somDefaultConstVAssign(M_WPDevCPUEx *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_M_WPDevCPUEx_somDefaultConstVAssign *somTD_M_WPDevCPUEx_somDefaultConstVAssign;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somInit(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somInit *somTD_M_WPDevCPUEx_somInit;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somFree(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somFree *somTD_M_WPDevCPUEx_somFree;
typedef SOMClass*   SOMLINK somTP_M_WPDevCPUEx_somGetClass(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetClass *somTD_M_WPDevCPUEx_somGetClass;
typedef string   SOMLINK somTP_M_WPDevCPUEx_somGetClassName(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetClassName *somTD_M_WPDevCPUEx_somGetClassName;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somGetSize(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somGetSize *somTD_M_WPDevCPUEx_somGetSize;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somIsA(M_WPDevCPUEx *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPDevCPUEx_somIsA *somTD_M_WPDevCPUEx_somIsA;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somIsInstanceOf(M_WPDevCPUEx *somSelf, 
		SOMClass* aClassObj);
typedef somTP_M_WPDevCPUEx_somIsInstanceOf *somTD_M_WPDevCPUEx_somIsInstanceOf;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somRespondsTo(M_WPDevCPUEx *somSelf, 
		somId mId);
typedef somTP_M_WPDevCPUEx_somRespondsTo *somTD_M_WPDevCPUEx_somRespondsTo;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somDispatch(M_WPDevCPUEx *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somDispatch *somTD_M_WPDevCPUEx_somDispatch;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somClassDispatch(M_WPDevCPUEx *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somClassDispatch *somTD_M_WPDevCPUEx_somClassDispatch;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somCastObj(M_WPDevCPUEx *somSelf, 
		SOMClass* cls);
typedef somTP_M_WPDevCPUEx_somCastObj *somTD_M_WPDevCPUEx_somCastObj;
typedef boolean   SOMLINK somTP_M_WPDevCPUEx_somResetObj(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somResetObj *somTD_M_WPDevCPUEx_somResetObj;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDispatchV(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somDispatchV *somTD_M_WPDevCPUEx_somDispatchV;
typedef long   SOMLINK somTP_M_WPDevCPUEx_somDispatchL(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somDispatchL *somTD_M_WPDevCPUEx_somDispatchL;
typedef void*   SOMLINK somTP_M_WPDevCPUEx_somDispatchA(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somDispatchA *somTD_M_WPDevCPUEx_somDispatchA;
typedef double   SOMLINK somTP_M_WPDevCPUEx_somDispatchD(M_WPDevCPUEx *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_M_WPDevCPUEx_somDispatchD *somTD_M_WPDevCPUEx_somDispatchD;
typedef SOMObject*   SOMLINK somTP_M_WPDevCPUEx_somPrintSelf(M_WPDevCPUEx *somSelf);
typedef somTP_M_WPDevCPUEx_somPrintSelf *somTD_M_WPDevCPUEx_somPrintSelf;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDumpSelf(M_WPDevCPUEx *somSelf, 
		long level);
typedef somTP_M_WPDevCPUEx_somDumpSelf *somTD_M_WPDevCPUEx_somDumpSelf;
typedef void   SOMLINK somTP_M_WPDevCPUEx_somDumpSelfInt(M_WPDevCPUEx *somSelf, 
		long level);
typedef somTP_M_WPDevCPUEx_somDumpSelfInt *somTD_M_WPDevCPUEx_somDumpSelfInt;
}

#endif /* M_WPDevCPUEx_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevCPUEx
 */
class M_WPDevCPUEx : public M_WPDevCPU
{
public:

// M_WPDevCPUEx::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevCPUEx) M_WPDevCPUExNewClass(M_WPDevCPUEx_MajorVersion,M_WPDevCPUEx_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevCPUEx,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevCPUEx));
}

// M_WPDevCPUEx::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

M_WPDevCPUEx& operator=(M_WPDevCPUEx& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevCPUEx()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevCPUEx(M_WPDevCPUEx* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
M_WPDevCPUEx(const M_WPDevCPUEx* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUExCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: wpclsInitData */
void   wpclsInitData()
{
   SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsInitData)
	(this);
}


/* method: wpclsQueryIconData */
ULONG   wpclsQueryIconData(PICONINFO pIconInfo)
{
/*
 * bjf152374
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryIconData)
	(this,pIconInfo);
}


/* method: wpclsQueryTitle */
PSZ   wpclsQueryTitle()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryTitle)
	(this);
}


/* method: wpclsUnInitData */
void   wpclsUnInitData()
{
   SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsUnInitData)
	(this);
}


/* method: wpclsQueryDefaultHelp */
BOOL   wpclsQueryDefaultHelp(PULONG pHelpPanelId, 
		PSZ pszHelpLibrary)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryDefaultHelp)
	(this,pHelpPanelId,pszHelpLibrary);
}


/* method: wpclsQueryDefaultView */
ULONG   wpclsQueryDefaultView()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryDefaultView)
	(this);
}


/* method: wpclsQueryDetailsInfo */
ULONG   wpclsQueryDetailsInfo(PCLASSFIELDINFO* ppClassFieldInfo, 
		PULONG pSize)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryDetailsInfo)
	(this,ppClassFieldInfo,pSize);
}


/* method: wpclsQueryStyle */
ULONG   wpclsQueryStyle()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryStyle)
	(this);
}


/* method: wpclsObjectFromHandle */
WPObject*   wpclsObjectFromHandle(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsObjectFromHandle)
	(this,hObject);
}


/* method: wpclsCreateDefaultTemplates */
BOOL   wpclsCreateDefaultTemplates(WPObject* Folder)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsCreateDefaultTemplates)
	(this,Folder);
}


/* method: wpclsMakeAwake */
WPObject*   wpclsMakeAwake(PSZ pszTitle, 
		ULONG ulStyle, 
		HPOINTER hptrIcon, 
		POBJDATA pObjData, 
		WPFolder* Folder, 
		ULONG ulUser)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsMakeAwake)
	(this,pszTitle,ulStyle,hptrIcon,pObjData,Folder,ulUser);
}


/* method: wpclsNew */
WPObject*   wpclsNew(PSZ pszTitle, 
		PSZ pszSetupEnv, 
		WPFolder* Folder, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsNew)
	(this,pszTitle,pszSetupEnv,Folder,fLock);
}


/* method: wpclsQueryDetails */
PCLASSDETAILS   wpclsQueryDetails()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryDetails)
	(this);
}


/* method: wpclsQueryExtendedCriteria */
BOOL   wpclsQueryExtendedCriteria(PSZ pszName, 
		ULONG ulSearchType, 
		PVOID pvoidExtendedCriteria)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryExtendedCriteria)
	(this,pszName,ulSearchType,pvoidExtendedCriteria);
}


/* method: wpclsQueryFolder */
WPObject*   wpclsQueryFolder(PSZ pszLocation, 
		BOOL fLock)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryFolder)
	(this,pszLocation,fLock);
}


/* method: wpclsQueryIcon */
HPOINTER   wpclsQueryIcon()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryIcon)
	(this);
}


/* method: wpclsQuerySearchInfo */
void   wpclsQuerySearchInfo(M_WPObject** ClassExtended, 
		M_WPObject** ClassCreate, 
		PULONG pulClassCriteriaSize)
{
   SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQuerySearchInfo)
	(this,ClassExtended,ClassCreate,pulClassCriteriaSize);
}


/* method: wpclsFindObjectFirst */
BOOL   wpclsFindObjectFirst(PCLASS pClassList, 
		PHFIND phFind, 
		PSZ pszTitle, 
		WPFolder* Folder, 
		BOOL fSubfolders, 
		PVOID pExtendedCriteria, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsFindObjectFirst)
	(this,pClassList,phFind,pszTitle,Folder,fSubfolders,pExtendedCriteria,pBuffer,pCount);
}


/* method: wpclsFindObjectNext */
BOOL   wpclsFindObjectNext(HFIND hFind, 
		POBJECT pBuffer, 
		PULONG pCount)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsFindObjectNext)
	(this,hFind,pBuffer,pCount);
}


/* method: wpclsFindObjectEnd */
BOOL   wpclsFindObjectEnd(HFIND hFind)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsFindObjectEnd)
	(this,hFind);
}


/* method: wpclsSetError */
BOOL   wpclsSetError(ULONG ulErrorId)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsSetError)
	(this,ulErrorId);
}


/* method: wpclsQueryError */
ULONG   wpclsQueryError()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryError)
	(this);
}


/* method: wpclsQuerySettingsPageSize */
BOOL   wpclsQuerySettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQuerySettingsPageSize)
	(this,pSizl);
}


/* method: wpclsQueryObject */
WPObject*   wpclsQueryObject(HOBJECT hObject)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryObject)
	(this,hObject);
}


/* method: wpclsQueryButtonAppearance */
ULONG   wpclsQueryButtonAppearance()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsQueryButtonAppearance)
	(this);
}


/* method: wpclsDecUsage */
void   wpclsDecUsage()
{
   SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsDecUsage)
	(this);
}


/* method: wpclsIncUsage */
void   wpclsIncUsage()
{
   SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsIncUsage)
	(this);
}


/* method: wpclsInsertMultipleObjects */
BOOL   wpclsInsertMultipleObjects(HWND hwndCnr, 
		PPOINTL pptlIcon, 
		PVOID* pObjectArray, 
		PVOID pRecordParent, 
		ULONG NumRecords)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsInsertMultipleObjects)
	(this,hwndCnr,pptlIcon,pObjectArray,pRecordParent,NumRecords);
}


/* method: wpclsFindOneObject */
WPObject*   wpclsFindOneObject(HWND hwndOwner, 
		PSZ pszFindParams)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsFindOneObject)
	(this,hwndOwner,pszFindParams);
}


/* method: wpclsSetSettingsPageSize */
BOOL   wpclsSetSettingsPageSize(PSIZEL pSizl)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsSetSettingsPageSize)
	(this,pSizl);
}


/* method: wpclsSetIconData */
BOOL   wpclsSetIconData(PICONINFO pIconInfo)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsSetIconData)
	(this,pIconInfo);
}


/* method: wpclsSetIcon */
BOOL   wpclsSetIcon(HPOINTER hptrNewIcon)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsSetIcon)
	(this,hptrNewIcon);
}


/* method: wpclsRemoveObjects */
BOOL   wpclsRemoveObjects(HWND hwndCnr, 
		PVOID* pRecordArray, 
		ULONG NumRecords, 
		BOOL RemoveAll)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,M_WPObject,wpclsRemoveObjects)
	(this,hwndCnr,pRecordArray,NumRecords,RemoveAll);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somUninit)
	(this);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somClassReady)
	(this);
}


/* method: somNew */
WPDevCPUEx*  somNew()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somNew)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somRenew)
	(this,obj);
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
/*
 *  The alignment required for the instance data structure
 *  introduced by the receiving class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
/*
 *  A sequence of the instance data offsets for all classes used in
 *  the derivation of the receiving class (including the receiver).
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
/*
 *  The ancestors whose initializers the receiving
 *  class wants to directly invoke.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
/*
 *  Equivalent to somNew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
/*
 *  Equivalent to somRenew except that somDefaultInit is not called.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
/*
 *  Equivalent to somRenew except that memory is not zeroed out.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
/*
 *  The purpose of this method is to load an object's method table.
 *  The SOM API requires that somRenewNoInitNoZero always be
 *  called when creating a new object whose metaclass is not SOMClass.
 *  This is because metaclasses must be guaranteed that they can use
 *  somRenewNoInitNoZero to track object creation if this is desired.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
somToken   somAllocate(long size)
{
/*
 *  Allocates memory to hold an object and returns a pointer to this memory.
 *  This is a nonstatic method, and cannot be overridden. The default
 *  implementation calls SOMMalloc, but a class designer can specify a
 *  different implementation using the somallocate modifier in IDL. The
 *  allocator takes the same parameters as this method.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(somToken memptr)
{
/*
 *  Zeros out the method table pointer stored in the word pointed to by
 *  memptr, and then deallocates the block of memory pointed to by memptr.
 *  This is a nonstatic method and cannot be overridden. The default
 *  deallocator called is SOMFree, but a class designer can specify a
 *  different deallocator using the somdeallocate modifier in IDL. The
 *  deallocator takes a char* (memptr) and a long (size) as arguments.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somDeallocate)
	(this,memptr);
}


/* method: somInitClass */
void   somInitClass(string className, 
		SOMClass* parentClass, 
		long dataSize, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitClass is obsolete, and should no longer be used. The SOM 2.0
 *  kernel provides special handling for redispatch stubs in the case
 *  of SOM 1.0 classes, and use of this method is what tells the kernel
 *  that old-style redispatch stubs will be registered.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars, 
		string className, 
		SOMClass_SOMClassSequence* parentClasses, 
		long dataSize, 
		long dataAlignment, 
		long maxStaticMethods, 
		long majorVersion, 
		long minorVersion)
{
/*
 *  somInitMIClass implements the second phase of dynamic class creation:
 *  inheritance of interface and possibly implementation (instance
 *  variables) by suitable initialization of <self> (a class object).
 * 
 *  For somInitMIClass, the inherit_vars argument controls whether abstract
 *  or implementation inheritance is used. Inherit_vars is a 32 bit
 *  bit-vector. Implementation is inherited from parent i iff the bit
 *  1<<i is on, or i>=32.
 *  On a class-by-class basis, for each class ancestor, implementation
 *  inheritance always takes precidence over abstract inheritance. This is
 *  necessary to guarantee that procedures supporting parent method calls
 *  (available on non-abstract parents) are always supported by parent
 *  instance variables.
 * 
 *  <className> is a string containing the class name. A copy is made, so
 *  the string may be freed upon return to the caller if this is desired.
 * 
 *  <parentClasses> is a SOMClassSequence containing pointers to the
 *  parent classes. somInitMIClass makes a copy of this, so it may
 *  be freed upon return to the caller if this is desired.
 * 
 *  <dataSize> is the space needed for the instance variables
 *  introduced by this class.
 * 
 *  <dataAlignment> specifies the desired byte alignment for instance
 *  data introduced by this class. A value of 0 selects a system-wide default;
 *  any other argument is taken as the desired byte alignment multiple. Thus,
 *  for example, even if a byte multiple of 8 is needed for double precision
 *  values on a given system (so 8 is the default), a class whose instance data
 *  doesn't require this can indicate otherwise. If A is the next memory
 *  address available for holding instance data, the address that will be
 *  used is A + (A mod byte-alignment).
 * 
 *  <maxStaticMethods> is the maximum number of static methods that will be
 *  added to the initialized class using addStaticMethod.
 * 
 *  <majorVersion> indicates the major version number for this
 *  implementation of the class definition, and <minorVersion>
 *  indicates the minor version number.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr redispatchStub, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method, creating and returning a new method token.
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <redispatchStub> is a procedure with the same calling sequence as
 *  <method> that invokes somDispatch for the method.
 * 
 *  <applyStub> is a procedure used to support somApply.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId, 
		somId methodDescriptor, 
		somMethodPtr method, 
		somMethodPtr applyStub)
{
/*
 *  Adds the indicated method to the class's name lookup list.
 *  If this happens to override a static method then this operation is
 *  equivalent to <somOverrideSMethod> and the <methodDescriptor> and
 *  <applyStub> arguments are ignored (the overridden method's values
 *  will be used).
 * 
 *  <methodDescriptor> is the somId for an identifier that can be used
 *  to access signature information about the method from an interface
 *  repository.
 * 
 *  <method> is the actual method procedure for this method
 * 
 *  <applyStub> is a procedure that takes a standard variable argument
 *  list data structure applies it to its target object by calling
 *  <method> with arguments derived from the data structure.  Its
 *  calling sequence is the same as the calling sequence of the
 *  dispatch methods defined in SOMObject.  This stub is used in the
 *  support of the dispatch methods used in some classes.  In classes
 *  where the dispatch functions do not need such a function this
 *  parameter may be null.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId, 
		somMethodPtr method)
{
/*
 *  This method can be used instead of <somAddStaticMethod> or
 *  <somAddDynamicMethod> when it is known that the class' parent
 *  class already supports this method.  This call does not require the
 *  method descriptor and stub methods that the others do.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
/*
 *  Returns the apply stub associated with the specified method,
 *  if one exists; otherwise NULL is returned. This method is obsolete,
 *  and retained for binary compatability. In SOMr2, users never access
 *  apply stubs directly; The function somApply is used to invoke apply
 *  stubs. See somApply documentation for further information on apply
 *  stubs, and see somAddStaticMethod documentation for information
 *  on how apply stubs are registered by class implementations.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
/*
 *  The class' pointer to the static <className>ClassData structure.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
/*
 *  A pointer to the method table used by instances of this class. This
 *  method was misnamed; it should have been called somGetInstanceMtab.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
/*
 *  Returns the offset of instance data introduced by the receiver in
 *  an instance of the receiver. This method is obsolete and not useful in
 *  multiple-inheritance situations. The attribute somInstanceDataOffsets
 *  replaces this method.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
/*
 *  The size in bytes of the instance data introduced by the receiving
 *  class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
/*
 *  The total size of an instance of the receiving class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
/*
 *  A data token that identifies the introduced portion of this class
 *  within itself or any derived class.  This token can be subsequently
 *  passed to the run-time somDataResolve function to locate the instance
 *  data introduced by this class in any object derived from this class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset, 
		somDToken instanceToken)
{
/*
 *  Returns a data token that for the data member at offset
 *  "memberOffset" within the introduced portion of the class identified
 *  by instanceToken.  The instance token must have been obtained from a
 *  previous invocation of somGetInstanceToken.  The returned member
 *  token can be subsequently passed to the run-time somDataResolve
 *  function to locate the data member.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId, 
		somMethodData* md)
{
/*
 *  If a method with id <methodId> is supported by the target class,
 *  the structure pointed to by <md> is loaded with method information
 *  and the value 1 is returned. In this case, if the method is not
 *  dynamic, md->method is loaded with the result of somClassResolve on
 *  the target class for the method. If the method is not supported,
 *  md->id is loaded with 0, and the value 0 is returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
/*
 *  Returns a redispatch stub for the indicated method, if possible.
 *  If not possible (because a valid redispatch stub has not been
 *  registered, and there is insufficient information to dynamically
 *  construct one), then a NULL is returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
/*
 *  Returns the method descriptor for the indicated method.    If
 *  this object does not support the indicated method then NULL is
 *  returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
/*
 *  Returns the index for the specified method. (A number that may
 *  change if any methods are added or deleted to this class object or
 *  any of its ancestors).  This number is the basis for other calls to
 *  get info about the method. Indexes start at 0. A -1 is returned if
 *  the method cannot be found.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
/*
 *  Returns the specified method's access token. This token can then
 *  be passed to method resolution routines, which use the token
 *  to select a method pointer from a method table.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
/*
 *  This object's class name as a NULL terminated string.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n, 
		somMethodData* md)
{
/*
 *  loads *md with the method data associated with the the nth method,
 *  or NULL if there is no such method. Returns true is successful;
 *  false otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n, 
		somId* descriptor)
{
/*
 *  Returns the id of the <n>th method if one exists and NULL
 *  otherwise.
 * 
 *  The ordering of the methods is unpredictable, but will not change
 *  unless some change is made to the class or one of its ancestor classes.
 * 
 *  See CORBA documentation for info on method descriptors.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
/*
 *  The number of methods currently supported by this class,
 *  including inherited methods (both static and dynamic).
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
/*
 *  The number of static methods that this class has.  Can
 *  be used by a child class when initializing its method table.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
/*
 *  Returns the parent class of self (along its "left-hand" derivation
 *  path), if one exists and NULL otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
/*
 *  The parent classes of self.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetParents)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion, 
		long* minorVersion)
{
/*
 *  Returns the class' major and minor version numbers in the corresponding
 *  output parameters.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Finds the method procedure associated with <methodId> for this
 *  class and sets <m> to it.  1 (true) is returned when the
 *  method procedure is a static method and 0 (false) is returned
 *  when the method procedure is dynamic method.
 * 
 *  If the class does not support the specified method then
 *  <m> is set to NULL and the return value is meaningless.
 * 
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId, 
		somMethodPtr* m)
{
/*
 *  Just like <somFindMethod> except that if the method is not
 *  supported then an error is raised and execution is halted.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
/*
 *  Finds the indicated method, which must be a static method supported
 *  by this class, and returns a pointer to its method procedure.
 *  If the method is not supported by the receiver (as a static method
 *  or at all) then a NULL pointer is returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
/*
 *  Uses <somFindSMethod>, and raises an error if the result is NULL.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
/*
 *  Like <somFindSMethodOK>, but without restriction to static methods.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion, 
		long minorVersion)
{
/*
 *  Returns 1 (true) if the implementation of this class is
 *  compatible with the specified major and minor version number and
 *  false (0) otherwise.  An implementation is compatible with the
 *  specified version numbers if it has the same major version number
 *  and a minor version number that is equal to or greater than
 *  <minorVersion>.    The major, minor version number pair (0,0) is
 *  considered to match any version.  This method is usually called
 *  immediately after creating the class object to verify that a
 *  dynamically loaded class definition is compatible with a using
 *  application.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if <self> is a descendent class of <aClassObj> and
 *  0 (false) otherwise.  Note: a class object is considered to be
 *  descended itself for the purposes of this method.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method is supported by this
 *  class and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
/*
 *  if the receiving class either introduces or overrides the
 *  indicated method, then its somMethodPtr is returned, otherwise
 *  NULL is returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
/*
 *  Overrides the method table pointers to point to the redispatch stubs.
 *  All the methods except somDispatch methods are overriden.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMClass,somOverrideMtab)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
M_WPDevCPUEx*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
M_WPDevCPUEx*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
M_WPDevCPUEx*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
M_WPDevCPUEx*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   M_WPDevCPUEx_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   M_WPDevCPUEx_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   M_WPDevCPUEx_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   M_WPDevCPUEx_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   M_WPDevCPUEx_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   M_WPDevCPUEx_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,M_WPDevCPUEx,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* M_WPDevCPUEx */



#endif       /* SOM_M_WPDevCPUEx_xh */
