
/*
 * This file was generated by the SOM Compiler.
 * FileName: datacls.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxih: 2.47
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_KeyObject_xih
#define SOM_KeyObject_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_KeyObject_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define KeyObject_MaxNoMethods 0

/*
 * -- Instance Data
 */
typedef void KeyObjectData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * -- Primary Implementation File Support
 */
#if (defined(KeyObject_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef KeyObjectMethodDebug
   #define KeyObjectMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfTCollectibleLongInit somSelf->somfTCollectibleLongInit
  #define _somfGetValue somSelf->somfGetValue
  #define _somfSetValue somSelf->somfSetValue
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somfIsSame somSelf->somfIsSame
#endif


/*
 * -- The KeyObject ClassData Structure
 */
SOMEXTERN struct KeyObjectClassDataStructure SOMDLINK KeyObjectClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary KeyObject ClassData structure
 */
SOMEXTERN struct KeyObjectCClassDataStructure SOMDLINK KeyObjectCClassData = {(somMethodTabs) NULL};


/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK key_somDefaultInit(KeyObject *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_KeyObjectsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_KeyObjectsomDefaultInit = &somMN_KeyObjectsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_KeyObjectsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK key_somDestruct(KeyObject *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_KeyObjectsomDestruct = "SOMObject::somDestruct";
static somId somId_KeyObjectsomDestruct = &somMN_KeyObjectsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_KeyObjectsomDestruct
#endif

/*
 * Overridden method: somfIsSame
 */
SOM_Scope boolean  SOMLINK key_somfIsSame(KeyObject *somSelf, Environment *ev,
		somf_MCollectible* obj);
static char *somMN_KeyObjectsomfIsSame = "somf_MCollectible::somfIsSame";
static somId somId_KeyObjectsomfIsSame = &somMN_KeyObjectsomfIsSame;
#ifdef somId_somfIsSame
#undef somId_somfIsSame
#else
#define somId_somfIsSame somId_KeyObjectsomfIsSame
#endif
typedef boolean   SOMLINK somTP_xih_KeyObject_somfIsSame(KeyObject *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_xih_KeyObject_somfIsSame *somTD_xih_KeyObject_somfIsSame;
/* define the parent method call macro */
static somMethodProc* KeyObject_parent_somf_TCollectibleLong_somfIsSame_resolved;
#define KeyObject_parent_somf_TCollectibleLong_somfIsSame(somSelf,ev,obj) \
  ((( somTD_xih_KeyObject_somfIsSame ) \
      KeyObject_parent_somf_TCollectibleLong_somfIsSame_resolved) \
	(somSelf,ev,obj))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somfIsSame
  #ifdef parent_somfIsSame
    #define SOMGD_pmc_parent_somfIsSame
    #undef parent_somfIsSame
  #else
#define parent_somfIsSame KeyObject_parent_somf_TCollectibleLong_somfIsSame
  #endif
#endif
#ifndef SOMGD_pmc_parent_somf_TCollectibleLong_somfIsSame
  #ifdef parent_somf_TCollectibleLong_somfIsSame
    #define SOMGD_pmc_parent_somf_TCollectibleLong_somfIsSame
    #undef parent_somf_TCollectibleLong_somfIsSame
  #else
    #define parent_somf_TCollectibleLong_somfIsSame KeyObject_parent_somf_TCollectibleLong_somfIsSame
  #endif
#endif
#define KeyObject_parents_somfIsSame(somSelf,ev,obj) (\
   KeyObject_parent_somf_TCollectibleLong_somfIsSame(somSelf,ev,obj))

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t KeyObjectOM[] = {
    {    &somId_KeyObjectsomDefaultInit,
         (somMethodProc *) key_somDefaultInit  },
    {    &somId_KeyObjectsomDestruct,
         (somMethodProc *) key_somDestruct  },
    {    &somId_KeyObjectsomfIsSame,
         (somMethodProc *) key_somfIsSame  },
};


/*
 *  class Ids
 */
static char * somCN_KeyObject = "KeyObject";
static char * somPCN_KeyObject_somf_TCollectibleLong = "somf_TCollectibleLong";

static somId somPCKeyObject[] = {
    &somPCN_KeyObject_somf_TCollectibleLong,
};

static somStaticClassInfo KeyObjectSCI = {
    4, 0, 3, 0, 0, 0, /* layout version 4 */ 
    KeyObject_MajorVersion, KeyObject_MinorVersion,
    0, KeyObject_MaxNoMethods, 1,
    &somCN_KeyObject,
    (somId) NULL, 1,
    somPCKeyObject,
    (somClassDataStructure *) &KeyObjectClassData,
    (somCClassDataStructure *) &KeyObjectCClassData,
    (somStaticMethod_t *) NULL, KeyObjectOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK KeyObjectNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_KeyObject && _KeyObject->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_KeyObject));
    somf_TCollectibleLongNewClass(somf_TCollectibleLong_MajorVersion,somf_TCollectibleLong_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&KeyObjectSCI, somtmajorVersion, somtminorVersion));
    KeyObject_parent_somf_TCollectibleLong_somfIsSame_resolved = 
	somParentNumResolve(KeyObjectCClassData.parentMtab, 1, somf_MCollectibleClassData.somfIsSame);
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define KeyObject_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)KeyObjectCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define KeyObject_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)KeyObjectCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   myMask = ctrl->mask; 
#define KeyObject_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   KeyObject_DeInit_somf_TCollectibleLong_somDestruct(somSelf,0,ctrl); \
   if (doFree) _KeyObject->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_TCollectibleLong */
#define KeyObject_Init_somf_TCollectibleLong_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define KeyObject_DeInit_somf_TCollectibleLong_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_KeyObject_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_ProductObject_xih
#define SOM_ProductObject_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_ProductObject_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define ProductObject_MaxNoMethods 2

/*
 * -- Instance Data
 */
typedef struct {
	string productName;
} ProductObjectData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef ProductObjectData* (SOMLINK * somTD_ProductObject_DataThunk)(void*);
#define ProductObjectGetData(somSelf) \
   (((somTD_ProductObject_DataThunk)(ProductObjectCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _productName (somThis->productName)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(ProductObject_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef ProductObjectMethodDebug
   #define ProductObjectMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_productName somSelf->_get_productName
  #define __set_productName somSelf->_set_productName
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The ProductObject ClassData Structure
 */
SOMEXTERN struct ProductObjectClassDataStructure SOMDLINK ProductObjectClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary ProductObject ClassData structure
 */
SOMEXTERN struct ProductObjectCClassDataStructure SOMDLINK ProductObjectCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_productName
 */
SOM_Scope string  SOMLINK product__get_productName(ProductObject *somSelf, Environment *ev);
/*
 * Method from the IDL attribute statement:
 * "attribute string productName"
 */
#ifndef somMN__get_productName_defined
#define somMN__get_productName_defined
static char *somMN__get_productName = "_get_productName";
static somId somId__get_productName = &somMN__get_productName;
#endif  /* somMN__get_productName_defined */
#ifndef somDS_product__get_productName_defined
#define somDS_product__get_productName_defined
static char *somDS_product__get_productName = "::ProductObject::_get_productName";
static somId somDI_product__get_productName = &somDS_product__get_productName;
#endif  /* somDS_product__get_productName_defined */
#define product__get_productName_somApRdDefault

/*
 * New Method: _set_productName
 */
SOM_Scope void  SOMLINK product__set_productName(ProductObject *somSelf, Environment *ev, 
		string productName);
/*
 * Method from the IDL attribute statement:
 * "attribute string productName"
 */
#ifndef somMN__set_productName_defined
#define somMN__set_productName_defined
static char *somMN__set_productName = "_set_productName";
static somId somId__set_productName = &somMN__set_productName;
#endif  /* somMN__set_productName_defined */
#ifndef somDS_product__set_productName_defined
#define somDS_product__set_productName_defined
static char *somDS_product__set_productName = "::ProductObject::_set_productName";
static somId somDI_product__set_productName = &somDS_product__set_productName;
#endif  /* somDS_product__set_productName_defined */
#define product__set_productName_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK product_somDefaultInit(ProductObject *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_ProductObjectsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_ProductObjectsomDefaultInit = &somMN_ProductObjectsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_ProductObjectsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK product_somDestruct(ProductObject *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_ProductObjectsomDestruct = "SOMObject::somDestruct";
static somId somId_ProductObjectsomDestruct = &somMN_ProductObjectsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_ProductObjectsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t ProductObjectSM[] = {
    {    &ProductObjectClassData._get_productName,
         &somId__get_productName,
         &somDI_product__get_productName,
         (somMethodProc *) product__get_productName,
         (somMethodProc *)((void*)-1),
#ifdef product__get_productName_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &product__get_productNameStubs) },
#endif
    {    &ProductObjectClassData._set_productName,
         &somId__set_productName,
         &somDI_product__set_productName,
         (somMethodProc *) product__set_productName,
         (somMethodProc *)((void*)-1),
#ifdef product__set_productName_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &product__set_productNameStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t ProductObjectOM[] = {
    {    &somId_ProductObjectsomDefaultInit,
         (somMethodProc *) product_somDefaultInit  },
    {    &somId_ProductObjectsomDestruct,
         (somMethodProc *) product_somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_ProductObject = "ProductObject";
static char * somPCN_ProductObject_somf_MCollectible = "somf_MCollectible";

static somId somPCProductObject[] = {
    &somPCN_ProductObject_somf_MCollectible,
};

static somStaticClassInfo ProductObjectSCI = {
    4, 2, 2, 0, 0, 0, /* layout version 4 */ 
    ProductObject_MajorVersion, ProductObject_MinorVersion,
    sizeof(ProductObjectData), ProductObject_MaxNoMethods, 1,
    &somCN_ProductObject,
    (somId) NULL, 1,
    somPCProductObject,
    (somClassDataStructure *) &ProductObjectClassData,
    (somCClassDataStructure *) &ProductObjectCClassData,
    ProductObjectSM, ProductObjectOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    2, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK ProductObjectNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_ProductObject && _ProductObject->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_ProductObject));
    somf_MCollectibleNewClass(somf_MCollectible_MajorVersion,somf_MCollectible_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&ProductObjectSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define ProductObject_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)ProductObjectCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (ProductObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define ProductObject_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)ProductObjectCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (ProductObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define ProductObject_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   ProductObject_DeInit_somf_MCollectible_somDestruct(somSelf,0,ctrl); \
   if (doFree) _ProductObject->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_MCollectible */
#define ProductObject_Init_somf_MCollectible_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define ProductObject_DeInit_somf_MCollectible_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_ProductObject_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_VendorObject_xih
#define SOM_VendorObject_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_VendorObject_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define VendorObject_MaxNoMethods 4

/*
 * -- Instance Data
 */
typedef struct {
	string vendorName;
	somf_THashTable* products;
	ProductObject* defaultProduct;
} VendorObjectData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef VendorObjectData* (SOMLINK * somTD_VendorObject_DataThunk)(void*);
#define VendorObjectGetData(somSelf) \
   (((somTD_VendorObject_DataThunk)(VendorObjectCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _vendorName (somThis->vendorName)
  #define _products (somThis->products)
  #define _defaultProduct (somThis->defaultProduct)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(VendorObject_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef VendorObjectMethodDebug
   #define VendorObjectMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_vendorName somSelf->_get_vendorName
  #define __set_vendorName somSelf->_set_vendorName
  #define _addProduct somSelf->addProduct
  #define _findProduct somSelf->findProduct
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The VendorObject ClassData Structure
 */
SOMEXTERN struct VendorObjectClassDataStructure SOMDLINK VendorObjectClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary VendorObject ClassData structure
 */
SOMEXTERN struct VendorObjectCClassDataStructure SOMDLINK VendorObjectCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_vendorName
 */
SOM_Scope string  SOMLINK vendor__get_vendorName(VendorObject *somSelf, Environment *ev);
/*
 * Method from the IDL attribute statement:
 * "attribute string vendorName"
 */
#ifndef somMN__get_vendorName_defined
#define somMN__get_vendorName_defined
static char *somMN__get_vendorName = "_get_vendorName";
static somId somId__get_vendorName = &somMN__get_vendorName;
#endif  /* somMN__get_vendorName_defined */
#ifndef somDS_vendor__get_vendorName_defined
#define somDS_vendor__get_vendorName_defined
static char *somDS_vendor__get_vendorName = "::VendorObject::_get_vendorName";
static somId somDI_vendor__get_vendorName = &somDS_vendor__get_vendorName;
#endif  /* somDS_vendor__get_vendorName_defined */
#define vendor__get_vendorName_somApRdDefault

/*
 * New Method: _set_vendorName
 */
SOM_Scope void  SOMLINK vendor__set_vendorName(VendorObject *somSelf, Environment *ev, 
		string vendorName);
/*
 * Method from the IDL attribute statement:
 * "attribute string vendorName"
 */
#ifndef somMN__set_vendorName_defined
#define somMN__set_vendorName_defined
static char *somMN__set_vendorName = "_set_vendorName";
static somId somId__set_vendorName = &somMN__set_vendorName;
#endif  /* somMN__set_vendorName_defined */
#ifndef somDS_vendor__set_vendorName_defined
#define somDS_vendor__set_vendorName_defined
static char *somDS_vendor__set_vendorName = "::VendorObject::_set_vendorName";
static somId somDI_vendor__set_vendorName = &somDS_vendor__set_vendorName;
#endif  /* somDS_vendor__set_vendorName_defined */
#define vendor__set_vendorName_somApRdDefault

/*
 * New Method: addProduct
 */
SOM_Scope ProductObject*  SOMLINK vendor_addProduct(VendorObject *somSelf, Environment *ev, 
		long key, 
		string productName);
#ifndef somMN_addProduct_defined
#define somMN_addProduct_defined
static char *somMN_addProduct = "addProduct";
static somId somId_addProduct = &somMN_addProduct;
#endif  /* somMN_addProduct_defined */
#ifndef somDS_vendor_addProduct_defined
#define somDS_vendor_addProduct_defined
static char *somDS_vendor_addProduct = "::VendorObject::addProduct";
static somId somDI_vendor_addProduct = &somDS_vendor_addProduct;
#endif  /* somDS_vendor_addProduct_defined */
#define vendor_addProduct_somApRdDefault

/*
 * New Method: findProduct
 */
SOM_Scope ProductObject*  SOMLINK vendor_findProduct(VendorObject *somSelf, Environment *ev, 
		long key);
#ifndef somMN_findProduct_defined
#define somMN_findProduct_defined
static char *somMN_findProduct = "findProduct";
static somId somId_findProduct = &somMN_findProduct;
#endif  /* somMN_findProduct_defined */
#ifndef somDS_vendor_findProduct_defined
#define somDS_vendor_findProduct_defined
static char *somDS_vendor_findProduct = "::VendorObject::findProduct";
static somId somDI_vendor_findProduct = &somDS_vendor_findProduct;
#endif  /* somDS_vendor_findProduct_defined */
#define vendor_findProduct_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK vendor_somDefaultInit(VendorObject *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_VendorObjectsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_VendorObjectsomDefaultInit = &somMN_VendorObjectsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_VendorObjectsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK vendor_somDestruct(VendorObject *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_VendorObjectsomDestruct = "SOMObject::somDestruct";
static somId somId_VendorObjectsomDestruct = &somMN_VendorObjectsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_VendorObjectsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t VendorObjectSM[] = {
    {    &VendorObjectClassData._get_vendorName,
         &somId__get_vendorName,
         &somDI_vendor__get_vendorName,
         (somMethodProc *) vendor__get_vendorName,
         (somMethodProc *)((void*)-1),
#ifdef vendor__get_vendorName_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &vendor__get_vendorNameStubs) },
#endif
    {    &VendorObjectClassData._set_vendorName,
         &somId__set_vendorName,
         &somDI_vendor__set_vendorName,
         (somMethodProc *) vendor__set_vendorName,
         (somMethodProc *)((void*)-1),
#ifdef vendor__set_vendorName_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &vendor__set_vendorNameStubs) },
#endif
    {    &VendorObjectClassData.addProduct,
         &somId_addProduct,
         &somDI_vendor_addProduct,
         (somMethodProc *) vendor_addProduct,
         (somMethodProc *)((void*)-1),
#ifdef vendor_addProduct_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &vendor_addProductStubs) },
#endif
    {    &VendorObjectClassData.findProduct,
         &somId_findProduct,
         &somDI_vendor_findProduct,
         (somMethodProc *) vendor_findProduct,
         (somMethodProc *)((void*)-1),
#ifdef vendor_findProduct_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &vendor_findProductStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t VendorObjectOM[] = {
    {    &somId_VendorObjectsomDefaultInit,
         (somMethodProc *) vendor_somDefaultInit  },
    {    &somId_VendorObjectsomDestruct,
         (somMethodProc *) vendor_somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_VendorObject = "VendorObject";
static char * somPCN_VendorObject_somf_MCollectible = "somf_MCollectible";

static somId somPCVendorObject[] = {
    &somPCN_VendorObject_somf_MCollectible,
};

static somStaticClassInfo VendorObjectSCI = {
    4, 4, 2, 0, 0, 0, /* layout version 4 */ 
    VendorObject_MajorVersion, VendorObject_MinorVersion,
    sizeof(VendorObjectData), VendorObject_MaxNoMethods, 1,
    &somCN_VendorObject,
    (somId) NULL, 1,
    somPCVendorObject,
    (somClassDataStructure *) &VendorObjectClassData,
    (somCClassDataStructure *) &VendorObjectCClassData,
    VendorObjectSM, VendorObjectOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    5, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK VendorObjectNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_VendorObject && _VendorObject->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_VendorObject));
    somf_MCollectibleNewClass(somf_MCollectible_MajorVersion,somf_MCollectible_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&VendorObjectSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define VendorObject_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)VendorObjectCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (VendorObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define VendorObject_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)VendorObjectCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (VendorObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define VendorObject_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   VendorObject_DeInit_somf_MCollectible_somDestruct(somSelf,0,ctrl); \
   if (doFree) _VendorObject->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_MCollectible */
#define VendorObject_Init_somf_MCollectible_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define VendorObject_DeInit_somf_MCollectible_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_VendorObject_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_USBDeviceCollection_xih
#define SOM_USBDeviceCollection_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_USBDeviceCollection_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define USBDeviceCollection_MaxNoMethods 2

/*
 * -- Instance Data
 */
typedef struct {
	VendorObject* defaultVendor;
} USBDeviceCollectionData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef USBDeviceCollectionData* (SOMLINK * somTD_USBDeviceCollection_DataThunk)(void*);
#define USBDeviceCollectionGetData(somSelf) \
   (((somTD_USBDeviceCollection_DataThunk)(USBDeviceCollectionCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _defaultVendor (somThis->defaultVendor)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(USBDeviceCollection_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef USBDeviceCollectionMethodDebug
   #define USBDeviceCollectionMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfTHashTableInitFLLL somSelf->somfTHashTableInitFLLL
  #define _somfTHashTableInitFLL somSelf->somfTHashTableInitFLL
  #define _somfTHashTableInitFL somSelf->somfTHashTableInitFL
  #define _somfTHashTableInitH somSelf->somfTHashTableInitH
  #define _somfAssign somSelf->somfAssign
  #define _somfCount somSelf->somfCount
  #define _somfRemove somSelf->somfRemove
  #define _somfDelete somSelf->somfDelete
  #define _somfMember somSelf->somfMember
  #define _somfRemoveAll somSelf->somfRemoveAll
  #define _somfDeleteAll somSelf->somfDeleteAll
  #define _somfDeleteAllKeys somSelf->somfDeleteAllKeys
  #define _somfDeleteAllValues somSelf->somfDeleteAllValues
  #define _somfAddMMB somSelf->somfAddMMB
  #define _somfAddMM somSelf->somfAddMM
  #define _somfGrow somSelf->somfGrow
  #define _somfRetrieve somSelf->somfRetrieve
  #define _somfSetGrowthRate somSelf->somfSetGrowthRate
  #define _somfSetRehashThreshold somSelf->somfSetRehashThreshold
  #define _somfGetGrowthRate somSelf->somfGetGrowthRate
  #define _somfGetRehashThreshold somSelf->somfGetRehashThreshold
  #define _somfSetHashFunction somSelf->somfSetHashFunction
  #define _somfGetHashFunction somSelf->somfGetHashFunction
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _addVendor somSelf->addVendor
  #define _findVendor somSelf->findVendor
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The USBDeviceCollection ClassData Structure
 */
SOMEXTERN struct USBDeviceCollectionClassDataStructure SOMDLINK USBDeviceCollectionClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary USBDeviceCollection ClassData structure
 */
SOMEXTERN struct USBDeviceCollectionCClassDataStructure SOMDLINK USBDeviceCollectionCClassData = {(somMethodTabs) NULL};


/*
 * New Method: addVendor
 */
SOM_Scope VendorObject*  SOMLINK USB_addVendor(USBDeviceCollection *somSelf, Environment *ev, 
		long key, 
		string vendorName);
#ifndef somMN_addVendor_defined
#define somMN_addVendor_defined
static char *somMN_addVendor = "addVendor";
static somId somId_addVendor = &somMN_addVendor;
#endif  /* somMN_addVendor_defined */
#ifndef somDS_USB_addVendor_defined
#define somDS_USB_addVendor_defined
static char *somDS_USB_addVendor = "::USBDeviceCollection::addVendor";
static somId somDI_USB_addVendor = &somDS_USB_addVendor;
#endif  /* somDS_USB_addVendor_defined */
#define USB_addVendor_somApRdDefault

/*
 * New Method: findVendor
 */
SOM_Scope VendorObject*  SOMLINK USB_findVendor(USBDeviceCollection *somSelf, Environment *ev, 
		long key);
#ifndef somMN_findVendor_defined
#define somMN_findVendor_defined
static char *somMN_findVendor = "findVendor";
static somId somId_findVendor = &somMN_findVendor;
#endif  /* somMN_findVendor_defined */
#ifndef somDS_USB_findVendor_defined
#define somDS_USB_findVendor_defined
static char *somDS_USB_findVendor = "::USBDeviceCollection::findVendor";
static somId somDI_USB_findVendor = &somDS_USB_findVendor;
#endif  /* somDS_USB_findVendor_defined */
#define USB_findVendor_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK USB_somDefaultInit(USBDeviceCollection *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_USBDeviceCollectionsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_USBDeviceCollectionsomDefaultInit = &somMN_USBDeviceCollectionsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_USBDeviceCollectionsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK USB_somDestruct(USBDeviceCollection *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_USBDeviceCollectionsomDestruct = "SOMObject::somDestruct";
static somId somId_USBDeviceCollectionsomDestruct = &somMN_USBDeviceCollectionsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_USBDeviceCollectionsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t USBDeviceCollectionSM[] = {
    {    &USBDeviceCollectionClassData.addVendor,
         &somId_addVendor,
         &somDI_USB_addVendor,
         (somMethodProc *) USB_addVendor,
         (somMethodProc *)((void*)-1),
#ifdef USB_addVendor_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &USB_addVendorStubs) },
#endif
    {    &USBDeviceCollectionClassData.findVendor,
         &somId_findVendor,
         &somDI_USB_findVendor,
         (somMethodProc *) USB_findVendor,
         (somMethodProc *)((void*)-1),
#ifdef USB_findVendor_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &USB_findVendorStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t USBDeviceCollectionOM[] = {
    {    &somId_USBDeviceCollectionsomDefaultInit,
         (somMethodProc *) USB_somDefaultInit  },
    {    &somId_USBDeviceCollectionsomDestruct,
         (somMethodProc *) USB_somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_USBDeviceCollection = "USBDeviceCollection";
static char * somPCN_USBDeviceCollection_somf_THashTable = "somf_THashTable";

static somId somPCUSBDeviceCollection[] = {
    &somPCN_USBDeviceCollection_somf_THashTable,
};

static somStaticClassInfo USBDeviceCollectionSCI = {
    4, 2, 2, 0, 0, 0, /* layout version 4 */ 
    USBDeviceCollection_MajorVersion, USBDeviceCollection_MinorVersion,
    sizeof(USBDeviceCollectionData), USBDeviceCollection_MaxNoMethods, 1,
    &somCN_USBDeviceCollection,
    (somId) NULL, 1,
    somPCUSBDeviceCollection,
    (somClassDataStructure *) &USBDeviceCollectionClassData,
    (somCClassDataStructure *) &USBDeviceCollectionCClassData,
    USBDeviceCollectionSM, USBDeviceCollectionOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    2, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK USBDeviceCollectionNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_USBDeviceCollection && _USBDeviceCollection->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_USBDeviceCollection));
    somf_THashTableNewClass(somf_THashTable_MajorVersion,somf_THashTable_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&USBDeviceCollectionSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define USBDeviceCollection_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)USBDeviceCollectionCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (USBDeviceCollectionData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define USBDeviceCollection_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)USBDeviceCollectionCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (USBDeviceCollectionData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define USBDeviceCollection_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   USBDeviceCollection_DeInit_somf_THashTable_somDestruct(somSelf,0,ctrl); \
   if (doFree) _USBDeviceCollection->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_THashTable */
#define USBDeviceCollection_Init_somf_THashTable_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define USBDeviceCollection_DeInit_somf_THashTable_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_USBDeviceCollection_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_RMDeviceObject_xih
#define SOM_RMDeviceObject_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_RMDeviceObject_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define RMDeviceObject_MaxNoMethods 4

/*
 * -- Instance Data
 */
typedef struct {
	long idVendor;
	long idProduct;
} RMDeviceObjectData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef RMDeviceObjectData* (SOMLINK * somTD_RMDeviceObject_DataThunk)(void*);
#define RMDeviceObjectGetData(somSelf) \
   (((somTD_RMDeviceObject_DataThunk)(RMDeviceObjectCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _idVendor (somThis->idVendor)
  #define _idProduct (somThis->idProduct)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(RMDeviceObject_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef RMDeviceObjectMethodDebug
   #define RMDeviceObjectMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_idVendor somSelf->_get_idVendor
  #define __set_idVendor somSelf->_set_idVendor
  #define __get_idProduct somSelf->_get_idProduct
  #define __set_idProduct somSelf->_set_idProduct
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The RMDeviceObject ClassData Structure
 */
SOMEXTERN struct RMDeviceObjectClassDataStructure SOMDLINK RMDeviceObjectClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary RMDeviceObject ClassData structure
 */
SOMEXTERN struct RMDeviceObjectCClassDataStructure SOMDLINK RMDeviceObjectCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_idVendor
 */
SOM_Scope long  SOMLINK device__get_idVendor(RMDeviceObject *somSelf, Environment *ev);
/*
 * Method from the IDL attribute statement:
 * "attribute long idVendor"
 */
#ifndef somMN__get_idVendor_defined
#define somMN__get_idVendor_defined
static char *somMN__get_idVendor = "_get_idVendor";
static somId somId__get_idVendor = &somMN__get_idVendor;
#endif  /* somMN__get_idVendor_defined */
#ifndef somDS_device__get_idVendor_defined
#define somDS_device__get_idVendor_defined
static char *somDS_device__get_idVendor = "::RMDeviceObject::_get_idVendor";
static somId somDI_device__get_idVendor = &somDS_device__get_idVendor;
#endif  /* somDS_device__get_idVendor_defined */
#define device__get_idVendor_somApRdDefault

/*
 * New Method: _set_idVendor
 */
SOM_Scope void  SOMLINK device__set_idVendor(RMDeviceObject *somSelf, Environment *ev, 
		long idVendor);
/*
 * Method from the IDL attribute statement:
 * "attribute long idVendor"
 */
#ifndef somMN__set_idVendor_defined
#define somMN__set_idVendor_defined
static char *somMN__set_idVendor = "_set_idVendor";
static somId somId__set_idVendor = &somMN__set_idVendor;
#endif  /* somMN__set_idVendor_defined */
#ifndef somDS_device__set_idVendor_defined
#define somDS_device__set_idVendor_defined
static char *somDS_device__set_idVendor = "::RMDeviceObject::_set_idVendor";
static somId somDI_device__set_idVendor = &somDS_device__set_idVendor;
#endif  /* somDS_device__set_idVendor_defined */
#define device__set_idVendor_somApRdDefault

/*
 * New Method: _get_idProduct
 */
SOM_Scope long  SOMLINK device__get_idProduct(RMDeviceObject *somSelf, Environment *ev);
/*
 * Method from the IDL attribute statement:
 * "attribute long idProduct"
 */
#ifndef somMN__get_idProduct_defined
#define somMN__get_idProduct_defined
static char *somMN__get_idProduct = "_get_idProduct";
static somId somId__get_idProduct = &somMN__get_idProduct;
#endif  /* somMN__get_idProduct_defined */
#ifndef somDS_device__get_idProduct_defined
#define somDS_device__get_idProduct_defined
static char *somDS_device__get_idProduct = "::RMDeviceObject::_get_idProduct";
static somId somDI_device__get_idProduct = &somDS_device__get_idProduct;
#endif  /* somDS_device__get_idProduct_defined */
#define device__get_idProduct_somApRdDefault

/*
 * New Method: _set_idProduct
 */
SOM_Scope void  SOMLINK device__set_idProduct(RMDeviceObject *somSelf, Environment *ev, 
		long idProduct);
/*
 * Method from the IDL attribute statement:
 * "attribute long idProduct"
 */
#ifndef somMN__set_idProduct_defined
#define somMN__set_idProduct_defined
static char *somMN__set_idProduct = "_set_idProduct";
static somId somId__set_idProduct = &somMN__set_idProduct;
#endif  /* somMN__set_idProduct_defined */
#ifndef somDS_device__set_idProduct_defined
#define somDS_device__set_idProduct_defined
static char *somDS_device__set_idProduct = "::RMDeviceObject::_set_idProduct";
static somId somDI_device__set_idProduct = &somDS_device__set_idProduct;
#endif  /* somDS_device__set_idProduct_defined */
#define device__set_idProduct_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK device_somDefaultInit(RMDeviceObject *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_RMDeviceObjectsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_RMDeviceObjectsomDefaultInit = &somMN_RMDeviceObjectsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_RMDeviceObjectsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK device_somDestruct(RMDeviceObject *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_RMDeviceObjectsomDestruct = "SOMObject::somDestruct";
static somId somId_RMDeviceObjectsomDestruct = &somMN_RMDeviceObjectsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_RMDeviceObjectsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t RMDeviceObjectSM[] = {
    {    &RMDeviceObjectClassData._get_idVendor,
         &somId__get_idVendor,
         &somDI_device__get_idVendor,
         (somMethodProc *) device__get_idVendor,
         (somMethodProc *)((void*)-1),
#ifdef device__get_idVendor_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &device__get_idVendorStubs) },
#endif
    {    &RMDeviceObjectClassData._set_idVendor,
         &somId__set_idVendor,
         &somDI_device__set_idVendor,
         (somMethodProc *) device__set_idVendor,
         (somMethodProc *)((void*)-1),
#ifdef device__set_idVendor_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &device__set_idVendorStubs) },
#endif
    {    &RMDeviceObjectClassData._get_idProduct,
         &somId__get_idProduct,
         &somDI_device__get_idProduct,
         (somMethodProc *) device__get_idProduct,
         (somMethodProc *)((void*)-1),
#ifdef device__get_idProduct_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &device__get_idProductStubs) },
#endif
    {    &RMDeviceObjectClassData._set_idProduct,
         &somId__set_idProduct,
         &somDI_device__set_idProduct,
         (somMethodProc *) device__set_idProduct,
         (somMethodProc *)((void*)-1),
#ifdef device__set_idProduct_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &device__set_idProductStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t RMDeviceObjectOM[] = {
    {    &somId_RMDeviceObjectsomDefaultInit,
         (somMethodProc *) device_somDefaultInit  },
    {    &somId_RMDeviceObjectsomDestruct,
         (somMethodProc *) device_somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_RMDeviceObject = "RMDeviceObject";
static char * somPCN_RMDeviceObject_somf_MCollectible = "somf_MCollectible";

static somId somPCRMDeviceObject[] = {
    &somPCN_RMDeviceObject_somf_MCollectible,
};

static somStaticClassInfo RMDeviceObjectSCI = {
    4, 4, 2, 0, 0, 0, /* layout version 4 */ 
    RMDeviceObject_MajorVersion, RMDeviceObject_MinorVersion,
    sizeof(RMDeviceObjectData), RMDeviceObject_MaxNoMethods, 1,
    &somCN_RMDeviceObject,
    (somId) NULL, 1,
    somPCRMDeviceObject,
    (somClassDataStructure *) &RMDeviceObjectClassData,
    (somCClassDataStructure *) &RMDeviceObjectCClassData,
    RMDeviceObjectSM, RMDeviceObjectOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    4, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK RMDeviceObjectNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_RMDeviceObject && _RMDeviceObject->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_RMDeviceObject));
    somf_MCollectibleNewClass(somf_MCollectible_MajorVersion,somf_MCollectible_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&RMDeviceObjectSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */
SOM_Scope long  SOMLINK device__get_idVendor(RMDeviceObject *somSelf, Environment *ev){
    RMDeviceObjectData *somThis = RMDeviceObjectGetData(somSelf);
    RMDeviceObjectMethodDebug("RMDeviceObject","device__get_idVendor");
    SOM_IgnoreWarning(ev);

    return (somThis->idVendor);
}
SOM_Scope void  SOMLINK device__set_idVendor(RMDeviceObject *somSelf, Environment *ev,
		long idVendor){
    RMDeviceObjectData *somThis = RMDeviceObjectGetData(somSelf);
    RMDeviceObjectMethodDebug("RMDeviceObject","device__set_idVendor");
    SOM_IgnoreWarning(ev);

    somThis->idVendor = idVendor;
}
SOM_Scope long  SOMLINK device__get_idProduct(RMDeviceObject *somSelf, Environment *ev){
    RMDeviceObjectData *somThis = RMDeviceObjectGetData(somSelf);
    RMDeviceObjectMethodDebug("RMDeviceObject","device__get_idProduct");
    SOM_IgnoreWarning(ev);

    return (somThis->idProduct);
}
SOM_Scope void  SOMLINK device__set_idProduct(RMDeviceObject *somSelf, Environment *ev,
		long idProduct){
    RMDeviceObjectData *somThis = RMDeviceObjectGetData(somSelf);
    RMDeviceObjectMethodDebug("RMDeviceObject","device__set_idProduct");
    SOM_IgnoreWarning(ev);

    somThis->idProduct = idProduct;
}

/*
 * Macros for initializer/destructor entry/exit
 */
#define RMDeviceObject_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)RMDeviceObjectCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (RMDeviceObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define RMDeviceObject_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)RMDeviceObjectCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (RMDeviceObjectData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define RMDeviceObject_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   RMDeviceObject_DeInit_somf_MCollectible_somDestruct(somSelf,0,ctrl); \
   if (doFree) _RMDeviceObject->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_MCollectible */
#define RMDeviceObject_Init_somf_MCollectible_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define RMDeviceObject_DeInit_somf_MCollectible_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_RMDeviceObject_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_RMDeviceCollection_xih
#define SOM_RMDeviceCollection_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_RMDeviceCollection_xh
#include <datacls.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

/*
 * Passthru lines: File: "C.xih", "after"
 */

#define INCL_BASE
#include <os2.h>
#include <rmbase.h>
#pragma pack(1)
typedef struct
{
   UCHAR              ctrlID;              // (00) controller ID
   UCHAR              deviceAddress;       // (01) USB device address
   UCHAR              bConfigurationValue; // (02) USB device configuration value
   UCHAR              bInterfaceNumber;    // (03) 0 based index in interface array for this item
   UCHAR              SpeedDevice;         // (04) 0 for full speed device, 1 - low speed device  2 - high speed device
   UCHAR              portNum;             // (05) port number to which device is attached
   USHORT             parentHubIndex;      // (06) index in hub table to parent hub, -1 for root hub device
   HDEVICE            rmDevHandle;         // (08) Resource Manager device handle
} GETDEVINFODATA, *NGETDEVINFO, FAR* PGETDEVINFO;

typedef struct _device_descriptor_
{
   UCHAR    bLength;             // (00) Size of descriptor in bytes
   UCHAR    bDescriptorType;     // (01) 0x01 - DEVICE Descriptor type
   USHORT   bcdUSB;              // (02) USB Specification Release Number
   UCHAR    bDeviceClass;        // (04) Class Code
   UCHAR    bDeviceSubClass;     // (05) SubClass Code
   UCHAR    bDeviceProtocol;     // (06) Protocol Code
   UCHAR    bMaxPacketSize0;     // (07) Maximum packet size for endpoint 0
   USHORT   idVendor;            // (08) Vendor ID
   USHORT   idProduct;           // (10) Product ID
   USHORT   bcdDevice;           // (12) Device release number
   UCHAR    iManufacturer;       // (14) Index of string descriptor describing manufacturer
   UCHAR    iProduct;            // (15) Index of string descriptor describing product
   UCHAR    iSerialNumber;       // (16) Index of string descriptor describing device's serial number
   UCHAR    bNumConfigurations;  // (17) Number of possible configurations
                                 // (18)
}  DeviceDescriptor;
#pragma pack()

APIRET APIENTRY UsbQueryNumberDevices( ULONG *pulNumDev);
APIRET APIENTRY UsbQueryDeviceInfo( ULONG ulDevNumber,ULONG *pulBufLen,GETDEVINFODATA *pucData);
APIRET APIENTRY UsbQueryDeviceReport( ULONG ulDevNumber,ULONG *pulBufLen,DeviceDescriptor *pucData);


#define RMDeviceCollection_MaxNoMethods 3

/*
 * -- Instance Data
 */
typedef void RMDeviceCollectionData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * -- Primary Implementation File Support
 */
#if (defined(RMDeviceCollection_Class_Source) || defined(SOM_Module_datacls_Source))

/*
 * Trace/Debug macro
 */
#ifndef RMDeviceCollectionMethodDebug
   #define RMDeviceCollectionMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfTHashTableInitFLLL somSelf->somfTHashTableInitFLLL
  #define _somfTHashTableInitFLL somSelf->somfTHashTableInitFLL
  #define _somfTHashTableInitFL somSelf->somfTHashTableInitFL
  #define _somfTHashTableInitH somSelf->somfTHashTableInitH
  #define _somfAssign somSelf->somfAssign
  #define _somfCount somSelf->somfCount
  #define _somfRemove somSelf->somfRemove
  #define _somfDelete somSelf->somfDelete
  #define _somfMember somSelf->somfMember
  #define _somfRemoveAll somSelf->somfRemoveAll
  #define _somfDeleteAll somSelf->somfDeleteAll
  #define _somfDeleteAllKeys somSelf->somfDeleteAllKeys
  #define _somfDeleteAllValues somSelf->somfDeleteAllValues
  #define _somfAddMMB somSelf->somfAddMMB
  #define _somfAddMM somSelf->somfAddMM
  #define _somfGrow somSelf->somfGrow
  #define _somfRetrieve somSelf->somfRetrieve
  #define _somfSetGrowthRate somSelf->somfSetGrowthRate
  #define _somfSetRehashThreshold somSelf->somfSetRehashThreshold
  #define _somfGetGrowthRate somSelf->somfGetGrowthRate
  #define _somfGetRehashThreshold somSelf->somfGetRehashThreshold
  #define _somfSetHashFunction somSelf->somfSetHashFunction
  #define _somfGetHashFunction somSelf->somfGetHashFunction
  #define _somfClone somSelf->somfClone
  #define _somfClonePointer somSelf->somfClonePointer
  #define _somfHash somSelf->somfHash
  #define _somfIsEqual somSelf->somfIsEqual
  #define _somfIsSame somSelf->somfIsSame
  #define _somfIsNotEqual somSelf->somfIsNotEqual
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _addRMDevice somSelf->addRMDevice
  #define _findRMDevice somSelf->findRMDevice
  #define _deleteRMDevice somSelf->deleteRMDevice
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The RMDeviceCollection ClassData Structure
 */
SOMEXTERN struct RMDeviceCollectionClassDataStructure SOMDLINK RMDeviceCollectionClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary RMDeviceCollection ClassData structure
 */
SOMEXTERN struct RMDeviceCollectionCClassDataStructure SOMDLINK RMDeviceCollectionCClassData = {(somMethodTabs) NULL};


/*
 * New Method: addRMDevice
 */
SOM_Scope RMDeviceObject*  SOMLINK RM_addRMDevice(RMDeviceCollection *somSelf, Environment *ev, 
		long key, 
		long idVendor, 
		long idProduct);
#ifndef somMN_addRMDevice_defined
#define somMN_addRMDevice_defined
static char *somMN_addRMDevice = "addRMDevice";
static somId somId_addRMDevice = &somMN_addRMDevice;
#endif  /* somMN_addRMDevice_defined */
#ifndef somDS_RM_addRMDevice_defined
#define somDS_RM_addRMDevice_defined
static char *somDS_RM_addRMDevice = "::RMDeviceCollection::addRMDevice";
static somId somDI_RM_addRMDevice = &somDS_RM_addRMDevice;
#endif  /* somDS_RM_addRMDevice_defined */
#define RM_addRMDevice_somApRdDefault

/*
 * New Method: findRMDevice
 */
SOM_Scope RMDeviceObject*  SOMLINK RM_findRMDevice(RMDeviceCollection *somSelf, Environment *ev, 
		long key);
#ifndef somMN_findRMDevice_defined
#define somMN_findRMDevice_defined
static char *somMN_findRMDevice = "findRMDevice";
static somId somId_findRMDevice = &somMN_findRMDevice;
#endif  /* somMN_findRMDevice_defined */
#ifndef somDS_RM_findRMDevice_defined
#define somDS_RM_findRMDevice_defined
static char *somDS_RM_findRMDevice = "::RMDeviceCollection::findRMDevice";
static somId somDI_RM_findRMDevice = &somDS_RM_findRMDevice;
#endif  /* somDS_RM_findRMDevice_defined */
#define RM_findRMDevice_somApRdDefault

/*
 * New Method: deleteRMDevice
 */
SOM_Scope void  SOMLINK RM_deleteRMDevice(RMDeviceCollection *somSelf, Environment *ev, 
		long key);
#ifndef somMN_deleteRMDevice_defined
#define somMN_deleteRMDevice_defined
static char *somMN_deleteRMDevice = "deleteRMDevice";
static somId somId_deleteRMDevice = &somMN_deleteRMDevice;
#endif  /* somMN_deleteRMDevice_defined */
#ifndef somDS_RM_deleteRMDevice_defined
#define somDS_RM_deleteRMDevice_defined
static char *somDS_RM_deleteRMDevice = "::RMDeviceCollection::deleteRMDevice";
static somId somDI_RM_deleteRMDevice = &somDS_RM_deleteRMDevice;
#endif  /* somDS_RM_deleteRMDevice_defined */
#define RM_deleteRMDevice_somApRdDefault

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK RM_somDefaultInit(RMDeviceCollection *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_RMDeviceCollectionsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_RMDeviceCollectionsomDefaultInit = &somMN_RMDeviceCollectionsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_RMDeviceCollectionsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK RM_somDestruct(RMDeviceCollection *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_RMDeviceCollectionsomDestruct = "SOMObject::somDestruct";
static somId somId_RMDeviceCollectionsomDestruct = &somMN_RMDeviceCollectionsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_RMDeviceCollectionsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t RMDeviceCollectionSM[] = {
    {    &RMDeviceCollectionClassData.addRMDevice,
         &somId_addRMDevice,
         &somDI_RM_addRMDevice,
         (somMethodProc *) RM_addRMDevice,
         (somMethodProc *)((void*)-1),
#ifdef RM_addRMDevice_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &RM_addRMDeviceStubs) },
#endif
    {    &RMDeviceCollectionClassData.findRMDevice,
         &somId_findRMDevice,
         &somDI_RM_findRMDevice,
         (somMethodProc *) RM_findRMDevice,
         (somMethodProc *)((void*)-1),
#ifdef RM_findRMDevice_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &RM_findRMDeviceStubs) },
#endif
    {    &RMDeviceCollectionClassData.deleteRMDevice,
         &somId_deleteRMDevice,
         &somDI_RM_deleteRMDevice,
         (somMethodProc *) RM_deleteRMDevice,
         (somMethodProc *)((void*)-1),
#ifdef RM_deleteRMDevice_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &RM_deleteRMDeviceStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t RMDeviceCollectionOM[] = {
    {    &somId_RMDeviceCollectionsomDefaultInit,
         (somMethodProc *) RM_somDefaultInit  },
    {    &somId_RMDeviceCollectionsomDestruct,
         (somMethodProc *) RM_somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_RMDeviceCollection = "RMDeviceCollection";
static char * somPCN_RMDeviceCollection_somf_THashTable = "somf_THashTable";

static somId somPCRMDeviceCollection[] = {
    &somPCN_RMDeviceCollection_somf_THashTable,
};

static somStaticClassInfo RMDeviceCollectionSCI = {
    4, 3, 2, 0, 0, 0, /* layout version 4 */ 
    RMDeviceCollection_MajorVersion, RMDeviceCollection_MinorVersion,
    0, RMDeviceCollection_MaxNoMethods, 1,
    &somCN_RMDeviceCollection,
    (somId) NULL, 1,
    somPCRMDeviceCollection,
    (somClassDataStructure *) &RMDeviceCollectionClassData,
    (somCClassDataStructure *) &RMDeviceCollectionCClassData,
    RMDeviceCollectionSM, RMDeviceCollectionOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    3, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK RMDeviceCollectionNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_RMDeviceCollection && _RMDeviceCollection->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_RMDeviceCollection));
    somf_THashTableNewClass(somf_THashTable_MajorVersion,somf_THashTable_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&RMDeviceCollectionSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define RMDeviceCollection_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)RMDeviceCollectionCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define RMDeviceCollection_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)RMDeviceCollectionCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   myMask = ctrl->mask; 
#define RMDeviceCollection_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   RMDeviceCollection_DeInit_somf_THashTable_somDestruct(somSelf,0,ctrl); \
   if (doFree) _RMDeviceCollection->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_THashTable */
#define RMDeviceCollection_Init_somf_THashTable_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define RMDeviceCollection_DeInit_somf_THashTable_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_RMDeviceCollection_xih */
